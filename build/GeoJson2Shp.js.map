{"version":3,"file":"GeoJson2Shp.js","sources":["../src/GeoJson2Shp/Shp/Extent.js","../src/GeoJson2Shp/Shp/Writer.js","../src/GeoJson2Shp/Shp/MultiPointWriter.js","../src/GeoJson2Shp/Shp/PointWriter.js","../src/GeoJson2Shp/Shp/PolyWriter.js","../src/GeoJson2Shp/Lib.js","../src/GeoJson2Shp/Dbf/FieldSize.js","../src/GeoJson2Shp/Dbf/FieldType.js","../src/GeoJson2Shp/Dbf/Field.js","../src/GeoJson2Shp/Dbf/Writer.js","../src/GeoJson2Shp/Shp/GeometryType.js","../src/GeoJson2Shp/GeoJson2Shp.js","index.js"],"sourcesContent":["﻿/**\r\n * GeoJson2Shp/Shp/Extent\r\n */\r\n\r\n\r\n/**\r\n * 表示范围的对象\r\n * @typedef {Object} Extent\r\n * @property {number} Extent.xmin x最小值\r\n * @property {number} Extent.ymin y最小值\r\n * @property {number} Extent.xmax x最大值\r\n * @property {number} Extent.maxy y最大值\r\n * @api\r\n */\r\n\r\n/**\r\n * 构建包含所有给定坐标的范围。\r\n * @param {Array.<module:GeoJson2Shp/Shp/Geometry~Coordinate>} 坐标数组\r\n * @return {module:GeoJson2Shp/Shp/Extent~Extent} 范围\r\n */\r\nexport function boundingExtent(coordinates) {\r\n    const extent = createEmpty();\r\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        extendCoordinate(extent, coordinates[i]);\r\n    }\r\n    return extent;\r\n}\r\n\r\n/**\r\n * 扩展范围包含指定坐标\r\n * @param {module:GeoJson2Shp/Shp/Extent~Extent} extent 范围\r\n * @param {module:GeoJson2Shp/Shp/Geom~Coordinate} pt 坐标\r\n * @return {module:GeoJson2Shp/Shp/Extent~Extent}  合并后的范围\r\n */\r\nexport function extendCoordinate(extent, pt) {\r\n    if (pt[0] < extent.xmin) extent.xmin = pt[0];\r\n    if (pt[0] > extent.xmax) extent.xmax = pt[0];\r\n    if (pt[1] < extent.ymin) extent.ymin = pt[1];\r\n    if (pt[1] > extent.ymax) extent.ymax = pt[1];\r\n    return extent;\r\n};\r\n\r\n/**\r\n * 修改范围,使范围包含指定坐标集\r\n * @param {module:GeoJson2Shp/Shp/Extent~Extent} extent 范围.\r\n * @param {Array.<module:GeoJson2Shp/Shp/Geometry~Coordinate>} 坐标数组\r\n * @return {module:GeoJson2Shp/Shp/Extent~Extent} 修改后的范围.\r\n */\r\nexport function extendCoordinates(extent, coordinates) {\r\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        extendCoordinate(extent, coordinates[i]);\r\n    }\r\n    return extent;\r\n}\r\n\r\n\r\n/**\r\n * 合并2个范围\r\n * @param {module:GeoJson2Shp/Shp/Extent~Extent} extent1 范围1\r\n * @param {module:GeoJson2Shp/Shp/Extent~Extent} extent2  范围2\r\n * @return {module:GeoJson2Shp/Shp/Extent~Extent}  合并后的范围\r\n */\r\nexport function extendExtent(extent1, extent2) {\r\n    if (extent2.xmax > extent1.xmax) extent1.xmax = extent2.xmax;\r\n    if (extent2.xmin < extent1.xmin) extent1.xmin = extent2.xmin;\r\n    if (extent2.ymax > extent1.ymax) extent1.ymax = extent2.ymax;\r\n    if (extent2.ymin < extent1.ymin) extent1.ymin = extent2.ymin;\r\n    return extent1;\r\n};\r\n\r\n\r\n/**\r\n * 创建空范围\r\n * @return {module:GeoJson2Shp/Shp/Extent~Extent}  最小范围\r\n */\r\nexport function createEmpty() {\r\n    return {\r\n        xmin: Number.MAX_VALUE,\r\n        ymin: Number.MAX_VALUE,\r\n        xmax: -Number.MAX_VALUE,\r\n        ymax: -Number.MAX_VALUE\r\n    };\r\n};\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/Writer\r\n */\r\n\r\n/**\r\n * 写入器基类,一般用于继承,而不在程序中实例化\r\n * \r\n * shp文件流信息\r\n * -------------------------------------\r\n *          |-----------------------|  ^\r\n * 00h /   0| FileCode(9994)        |  |\r\n *          |-----------------------|  |\r\n * 01h /   4|                       |  |\r\n *          |-----------------------|  |\r\n * 02h /  24| shp文件长度           |  |  \r\n *          |-----------------------|  |\r\n * 03h /  28| 版本号(1000)          |  |\r\n *          |-----------------------|  |\r\n * 04h /  32| 几何图形类型          |  |\r\n *          |-----------------------| 文件头信息\r\n * 05h /  36| x最小值               |  |\r\n *          |-----------------------|  |\r\n * 06h /  44| y最小值               |  |\r\n *          |-----------------------|  |\r\n * 07h /  52| x最大值               |  |\r\n *          |-----------------------|  |\r\n * 08h /  60| y最大值               |  |\r\n *          |-----------------------|  |\r\n * 09h /  68|                       |  |\r\n *          |                       |  |\r\n * 0Ah / 100|=======================|__v\r\n *          |                       |  ^\r\n *          |                       |  | \r\n *          |                       |  | \r\n *          | 几何图形信息          |  | \r\n *          |                       |  | \r\n *          |                       |  | \r\n *          |                       |  |\r\n *          |-----------------------|  v \r\n * -------------------------------------\r\n * \r\n * \r\n * shx文件流信息\r\n * -------------------------------------\r\n *          |-----------------------|  ^\r\n * 00h /   0| FileCode(9994)        |  |\r\n *          |-----------------------|  |\r\n * 01h /   4|                       |  |\r\n *          |-----------------------|  |\r\n * 02h /  24| shp文件长度           |  |\r\n *          |-----------------------|  |\r\n * 03h /  28| 版本号(1000)          |  |\r\n *          |-----------------------|  |\r\n * 04h /  32| 几何图形类型          |  |\r\n *          |-----------------------| 文件头信息\r\n * 05h /  36| x最小值               |  |\r\n *          |-----------------------|  |\r\n * 06h /  44| y最小值               |  |\r\n *          |-----------------------|  |\r\n * 07h /  52| x最大值               |  |\r\n *          |-----------------------|  |\r\n * 08h /  60| y最大值               |  |\r\n *          |-----------------------|  |\r\n * 09h /  68|                       |  |\r\n *          |                       |  |            \r\n * 0Ah / 100|=======================|__v              \r\n *          |                       |  ^       _    \r\n *          |                       |  |      /  |==============================================|  ^\r\n *          | ............          |  |_____/   | 00h /   0| 几何图形流在文件中的起始位置      |  |\r\n *          | 几何图形信息          |  |_____    |----------------------------------------------|  |\r\n *          | ............          |  |     \\   | 01h /   4| 几何图形流内容长度(不包括头信息)  |  |\r\n *          |                       |  |      \\_ |==============================================|  v\r\n *          |                       |  |\r\n *          |-----------------------|  v\r\n * -------------------------------------\r\n * \r\n */\r\nclass Writer {\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param {Array.<module:GeoJson2Shp/Shp/Geometry~Geometry>} geometries 图形数组\r\n     * @param {module:GeoJson2Shp/Shp/GeometryType} type 图形类型\r\n     */\r\n    constructor(geometries, type) {\r\n        /**\r\n         * 图形数组\r\n         * @type {Array.<module:GeoJson2Shp/Shp/Geometry~Geometry>}\r\n        */\r\n        this.geometries_ = geometries;\r\n\r\n        /**\r\n         * 图形类型\r\n         * @type {module:GeoJson2Shp/Shp/GeometryType}\r\n         */\r\n        this.type_ = type;\r\n    }\r\n\r\n    /**\r\n     * 写入文件\r\n     * @param {function} callback 回调函数\r\n     */\r\n    write(callback) {\r\n\r\n        /**\r\n         * shp文件流长度 \r\n         */\r\n        var shpLength = 100 + this.getShpLength();\r\n        /**\r\n         * shx文件流长度 \r\n         */\r\n        var shxLength = 100 + this.getShxLength();\r\n\r\n        /**\r\n         * shp文件流 \r\n         */\r\n        var shpBuffer = new ArrayBuffer(shpLength);\r\n\r\n        /**\r\n         * shp文件视图 \r\n         */\r\n        var shpView = new DataView(shpBuffer);\r\n\r\n        /**\r\n         *  shx文件流\r\n         */\r\n        var shxBuffer = new ArrayBuffer(shxLength);\r\n\r\n        /**\r\n         * shx文件视图 \r\n         */\r\n        var shxView = new DataView(shxBuffer);\r\n\r\n        /**\r\n         * 范围 \r\n         */\r\n        var extent = this.getExtent();\r\n\r\n        // 写入shp文件头文件信息\r\n        this.writeHeader(shpView, this.type_);\r\n        // 写入shx文件头文件信息\r\n        this.writeHeader(shxView, this.type_);\r\n        //写入shp文件范围信息\r\n        this.writeExtent(extent, shpView);\r\n        //写入shx文件范围信息\r\n        this.writeExtent(extent, shxView);\r\n\r\n        //写入几何信息\r\n        this.writeGeometry(\r\n            new DataView(shpBuffer),\r\n            new DataView(shxBuffer));\r\n\r\n        //写入shp文件流长度\r\n        shpView.setInt32(24, shpLength / 2);\r\n        //写入shx文件流长度\r\n        shxView.setInt32(24, shxLength / 2);\r\n\r\n        callback(null, {\r\n            shp: shpView,\r\n            shx: shxView\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 写入文件头信息\r\n     * @param {DataView} view 视图\r\n     */\r\n    writeHeader(view) {\r\n        view.setInt32(0, 9994);\r\n        view.setInt32(28, 1000, true);\r\n        view.setInt32(32, this.type_, true);\r\n    }\r\n\r\n    /**\r\n     * 写入范围信息\r\n     * @param {module:GeoJson2Shp/Shp/Extent~Extent} extent  范围\r\n     * @param {DataView} view 视图\r\n     */\r\n    writeExtent(extent, view) {\r\n        view.setFloat64(36, extent.xmin, true);\r\n        view.setFloat64(44, extent.ymin, true);\r\n        view.setFloat64(52, extent.xmax, true);\r\n        view.setFloat64(60, extent.ymax, true);\r\n    }\r\n\r\n    /**\r\n     * 写入几何图形部分\r\n     * @param {any} shpView\r\n     * @param {any} shxView\r\n     */\r\n    writeGeometry(shpView, shxView) {\r\n\r\n    }\r\n\r\n    /**\r\n     * 获取shp文件长度\r\n     * @return {number} shp文件长度\r\n     */\r\n    getShpLength() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 获取shx文件长度\r\n     * @return {number} shx文件长度\r\n     */\r\n    getShxLength() {\r\n\r\n    }\r\n    /**\r\n     * 获取范围\r\n     * @return {module:GeoJson2Sho/Shp/Extent~Extent} 范围\r\n     */\r\n    getExtent() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 获取子图形数量 \r\n     * @param {any} geometries\r\n     * @return {number} 子图形数量\r\n     */\r\n    getPartCount(geometries) {\r\n    }\r\n\r\n    /**\r\n     * 获取平面坐标 \r\n     * @return {Array.<module:GeoJson2Shp/Shp/Geometry~Coordinate>} 平面坐标\r\n     */\r\n    getFlattened(coords, l) {\r\n        if (l === undefined) l = [];\r\n        if (typeof coords[0][0] == 'object') {\r\n            return coords.reduce(function (memo, c) {\r\n                return memo.concat(this.getFlattened(c));\r\n            }.bind(this), l);\r\n        } else {\r\n            return coords;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Writer;\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/MultiPointWriter\r\n */\r\nimport * as ext from './Extent.js'\r\nimport Writer from './Writer.js'\r\n\r\n\r\n/**\r\n * 多点写入器 \r\n * \r\n * shp文件点内容\r\n * ---------------------------------------\r\n *             |=======================|  ^\r\n * 00h /      0| 记录号(表示第几个图斑)|  |\r\n *             | 从1开始               |  |\r\n *             |-----------------------|头信息\r\n * 01h /      4| 内容所占长度          |  |\r\n *             |=======================|--v\r\n * 02h /      8| 几何图形类型          |  ^\r\n *             |-----------------------|  |\r\n * 03h /     12| x最小值               |  |\r\n *             |-----------------------|  |\r\n * 04h /     20| y最小值               |  |\r\n *             |-----------------------|  |\r\n * 05h /     28| x最大值               |  |\r\n *             |-----------------------|  |\r\n * 06h /     36| y最大值               | 内容\r\n *             |-----------------------|  |\r\n * 07h /     44| 坐标点数量            |  |\r\n *             |-----------------------|  |\r\n * 08h /       | ................      |  |\r\n * 48+         | 坐标点                |  |\r\n * partIndex*4+| ................      |  |\r\n * coorIndex*16|                       |  |\r\n *             |-----------------------|  v\r\n * ----------------------------------------\r\n */\r\nclass MultiPointWriter extends Writer {\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    constructor(geometries, type) {\r\n        super(geometries, type);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    writeGeometry(shpView, shxView) {\r\n\r\n        /**\r\n         * 1个图形内容所占长度\r\n         * (1)几何类型(4)\r\n         * (2)范围(4*8=32)\r\n         * (4)坐标数量(4)\r\n         * (6)坐标点(coorCount*16)\r\n         * @type {number}\r\n         */\r\n        var contentLength;\r\n\r\n        /**\r\n         * 1个图形头信息所占长度\r\n         * (1)记录号(4)\r\n         * (2)内容所占长度(4)\r\n         * @type {number}\r\n         */\r\n        var headerLength = 8;\r\n\r\n        /**\r\n         * 几何图形信息在shp文件流中起始位置\r\n         * @type {number}\r\n         */\r\n        var shpI = 100;\r\n\r\n        /**\r\n         * 几何图形信息在shx文件流中起始位置\r\n         * @type {number}\r\n         */\r\n        var shxI = 100;\r\n\r\n        //循环写入几何图形\r\n        this.geometries_.forEach(\r\n            function writeMultiPoint(coordinates, i) {\r\n                //平面坐标\r\n                var flattened = this.getFlattened(coordinates);\r\n                //内容所占长度\r\n                //几何类型(4)+范围(4*8=32)+坐标数量(4)+坐标点(coorCount*16)\r\n                contentLength = 4 + 32 + 4 + (flattened.length * 16);\r\n\r\n                //范围\r\n                var featureExtent = flattened.reduce(function (extent, c) {\r\n                    return ext.extendCoordinate(extent, c);\r\n                }, ext.createEmpty());\r\n\r\n                //#region shx文件\r\n                //shx写入几何图形在shp文件起始位值(4)\r\n                shxView.setInt32(shxI, shpI / 2);\r\n                //shx写入记录内容长度(4)\r\n                shxView.setInt32(shxI + 4, contentLength / 2);\r\n                //shx文件下一个图形写入位置:记录位移量(4)+记录长度(4)=8\r\n                shxI += 8;\r\n                //#endregion shx文件\r\n\r\n                //#region shx文件\r\n                //shp写入记录号,从1开始(4)\r\n                shpView.setInt32(shpI, i + 1);\r\n                //shp写入内容长度(4)\r\n                shpView.setInt32(shpI + 4, contentLength / 2);\r\n                //shp写入几何图形类型(4)\r\n                shpView.setInt32(shpI + 8, this.type_, true);\r\n                //shp写入范围(32)\r\n                shpView.setFloat64(shpI + 12, featureExtent.xmin, true);\r\n                shpView.setFloat64(shpI + 20, featureExtent.ymin, true);\r\n                shpView.setFloat64(shpI + 28, featureExtent.xmax, true);\r\n                shpView.setFloat64(shpI + 36, featureExtent.ymax, true);\r\n                //shp写入坐标数量(4)\r\n                shpView.setInt32(shpI + 44, flattened.length, true);\r\n                //shp写入坐标(coorCount*16)\r\n                flattened.forEach(function writeLine(coords, i) {\r\n                    shpView.setFloat64(shpI + 48 + (i * 16), coords[0], true); // X\r\n                    shpView.setFloat64(shpI + 48 + (i * 16) + 8, coords[1], true); // Y\r\n                });\r\n                //shp文件下一个图形写入起始位置\r\n                shpI += contentLength + headerLength;\r\n                //#endregion shx文件\r\n            }.bind(this));\r\n    }\r\n\r\n    /** \r\n     * @inheritdoc\r\n     */\r\n    getPartCount(geometries) {\r\n        return geometries.length;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getExtent() {\r\n        return this.getFlattened(this.geometries_).reduce(function (extent, c) {\r\n            return ext.extendCoordinate(extent, c);\r\n        }, ext.createEmpty());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc \r\n     */\r\n    getShxLength() {\r\n        return this.geometries_.length * 8;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc \r\n     */\r\n    getShpLength() {\r\n        return (this.geometries_.length * 48) +\r\n            // points\r\n            (this.getFlattened(this.geometries_).length * 16);\r\n    }\r\n}\r\n\r\nexport default MultiPointWriter;\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/PointsWriter\r\n */\r\n\r\nimport * as ext from './Extent.js'\r\nimport Writer from './Writer.js'\r\n\r\n/**\r\n * 点写入器 \r\n * shp文件点内容\r\n * -------------------------------------\r\n *          |=======================|  ^\r\n * 00h /   0| 记录号(表示第几个图斑)|  |\r\n *          | 从1开始               |  |                  \r\n *          |-----------------------|头信息\r\n * 01h /   4| 内容所占长度          |  |\r\n *          |=======================|--v\r\n * 02h /  8 | 几何图形类型          |  ^\r\n *          |-----------------------|  |\r\n * 03h /  12| x坐标                 |  内容\r\n *          |-----------------------|  |\r\n * 04h /  20| y坐标                 |  |\r\n *          |-----------------------|  v\r\n * -------------------------------------\r\n */\r\nclass PointWriter extends Writer {\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    constructor(geometries, type) {\r\n        super(geometries, type);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    writeGeometry(shpView, shxView) {\r\n\r\n        /**\r\n         * 1个图形内容所占长度\r\n         * (1)几何类型(4)\r\n         * (2)x坐标(8)\r\n         * (3)y坐标(8)\r\n         * @type {number}\r\n         */\r\n        var contentLength = 20;\r\n\r\n        /**\r\n         * 1个图形头信息所占长度\r\n         * (1)记录号(4)\r\n         * (2)内容所占长度(4)\r\n         * @type {number}\r\n         */\r\n        var headerLength = 8;\r\n\r\n        /**\r\n         * 几何图形信息在shp文件流中起始位置 \r\n         * @type {number}\r\n         */\r\n        var shpI = 100;\r\n\r\n        /**\r\n         * 几何图形信息在shx文件流中起始位置\r\n         * @type {number}\r\n         */\r\n        var shxI = 100;\r\n\r\n        //循环写入几何图形\r\n        this.geometries_.forEach(function writePoint(coords, i) {\r\n            //#region shx文件\r\n            //shx写入几何图形在shp文件起始位值(4)\r\n            shxView.setInt32(shxI, shpI / 2);\r\n            //shx写入记录内容长度(4)   (图形类型+x坐标+y坐标)/2=(4+8+8)/2 =20\r\n            shxView.setInt32(shxI + 4, contentLength / 2);\r\n            //shx文件下一个图形写入位置:记录位移量(4)+记录长度(4)=8\r\n            shxI += 8;\r\n            //#endregion shx文件\r\n\r\n            //#region shp文件\r\n            //shp写入记录号,从1开始(4)\r\n            shpView.setInt32(shpI, i + 1);\r\n            //shp写入内容长度(4)\r\n            shpView.setInt32(shpI + 4, contentLength / 2);\r\n            //shp写入几何图形类型(4)\r\n            shpView.setInt32(shpI + 8, this.type_, true);\r\n            //shp写入x坐标(8)\r\n            shpView.setFloat64(shpI + 12, coords[0], true);\r\n            //shp写入y坐标(8)\r\n            shpView.setFloat64(shpI + 20, coords[1], true);\r\n\r\n            //shp文件下一个图形写入起始位置\r\n            shpI += contentLength + headerLength;\r\n            //#endregion shp文件\r\n\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc \r\n     */\r\n    getPartCount(geometries) {\r\n        return geometries.length;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getExtent() {\r\n        return this.geometries_.reduce(function (extent, coords) {\r\n            return ext.extendCoordinate(extent, coords);\r\n        }, ext.createEmpty());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getShpLength() {\r\n        return this.geometries_.length * 28;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getShxLength() {\r\n        return this.geometries_.length * 8;\r\n    }\r\n}\r\n\r\nexport default PointWriter;\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/PolyWriter\r\n */\r\n\r\nimport * as ext from './Extent.js'\r\nimport Writer from './Writer.js'\r\n\r\n/**\r\n * 线,面写入器 \r\n * \r\n * shp文件点内容\r\n * ---------------------------------------\r\n *             |=======================|  ^\r\n * 00h /      0| 记录号(表示第几个图斑)|  |\r\n *             | 从1开始               |  |\r\n *             |-----------------------|头信息\r\n * 01h /      4| 内容所占长度          |  |\r\n *             |=======================|--v\r\n * 02h /      8| 几何图形类型          |  ^\r\n *             |-----------------------|  |\r\n * 03h /     12| x最小值               |  |\r\n *             |-----------------------|  |\r\n * 04h /     20| y最小值               |  |\r\n *             |-----------------------|  |\r\n * 05h /     28| x最大值               |  |\r\n *             |-----------------------|  |\r\n * 06h /     36| y最大值               |  |\r\n *             |-----------------------|  |\r\n * 07h /     44| 子图形数量            |  |\r\n *             |-----------------------|内容\r\n * 08h /     48| 坐标点数量            |  |\r\n *             |-----------------------|  |\r\n *             | ................      |  |\r\n * 09h /       | 子图形起始坐标索引    |  |\r\n * 52+         | 从0开始               |  |\r\n * partIndex*4 | ................      |  |\r\n *             |-----------------------|  |\r\n * 0Ah /       | ................      |  |\r\n * 52+         | 坐标点                |  |\r\n * partIndex*4+| ................      |  |\r\n * coorIndex*16|                       |  |\r\n *             |-----------------------|  v\r\n * ----------------------------------------\r\n */\r\nclass PolyWriter extends Writer {\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    constructor(geometries, type) {\r\n        super(geometries, type);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    writeGeometry(shpView, shxView) {\r\n\r\n        /**\r\n         * 1个图形内容所占长度\r\n         * (1)几何类型(4)\r\n         * (2)范围(4*8=32)\r\n         * (3)子图形数量(4)\r\n         * (4)坐标数量(4)\r\n         * (5)子图形起始坐标索引(partCount*4)\r\n         * (6)坐标点(coorCount*16)\r\n         * @type {number}\r\n         */\r\n        var contentLength;\r\n\r\n        /**\r\n         * 1个图形头信息所占长度\r\n         * (1)记录号(4)\r\n         * (2)内容所占长度(4)\r\n         * @type {number}\r\n         */\r\n        var headerLength = 8;\r\n\r\n        /**\r\n         * 几何图形信息在shp文件流中起始位置\r\n         * @type {number}\r\n         */\r\n        var shpI = 100;\r\n\r\n        /**\r\n         * 几何图形信息在shx文件流中起始位置\r\n         * @type {number}\r\n         */\r\n        var shxI = 100;\r\n\r\n        //循环写入几何图形\r\n        this.geometries_.forEach(function writePolyLine(coordinates, i) {\r\n            //平面坐标\r\n            var flattened = this.getFlattened(coordinates);\r\n            //子图形数量\r\n            var noParts = this.getPartCount([coordinates], this.type_);\r\n            //内容所占长度\r\n            //几何类型(4)+范围(4*8=32)+子图形数量(4)+坐标数量(4)+子图形起始坐标索引(partCount*4)+坐标点(coorCount*16)\r\n            contentLength = 4 + 32 + 4 + 4 + (noParts) * 4 + (flattened.length * 16);\r\n            //范围\r\n            var featureExtent = flattened.reduce(function (extent, c) {\r\n                return ext.extendCoordinate(extent, c);\r\n            }, ext.createEmpty());\r\n\r\n            //#region shx文件\r\n            //shx写入几何图形在shp文件起始位值(4)\r\n            shxView.setInt32(shxI, shpI / 2);\r\n            //shx写入记录内容长度(4)\r\n            shxView.setInt32(shxI + 4, contentLength / 2);\r\n            //shx文件下一个图形写入位置:记录位移量(4)+记录长度(4)=8\r\n            shxI += 8;\r\n            //#endregion shx文件\r\n\r\n\r\n            //#region shx文件\r\n            //shp写入记录号,从1开始(4)\r\n            shpView.setInt32(shpI, i + 1);\r\n            //shp写入内容长度(4)\r\n            shpView.setInt32(shpI + 4, contentLength / 2);\r\n            //shp写入几何图形类型(4)\r\n            shpView.setInt32(shpI + 8, this.type_, true);\r\n            //shp写入范围(32)\r\n            shpView.setFloat64(shpI + 12, featureExtent.xmin, true);\r\n            shpView.setFloat64(shpI + 20, featureExtent.ymin, true);\r\n            shpView.setFloat64(shpI + 28, featureExtent.xmax, true);\r\n            shpView.setFloat64(shpI + 36, featureExtent.ymax, true);\r\n            //shp写入子图形数量(4)\r\n            shpView.setInt32(shpI + 44, noParts, true);\r\n            //shp写入坐标数量(4)\r\n            shpView.setInt32(shpI + 48, flattened.length, true);\r\n\r\n            //#region 写入子图形坐标开始索引号(partCount*4)\r\n            //shp第一个子图形坐标开始索引号(4)\r\n            shpView.setInt32(shpI + 52, 0, true);\r\n\r\n            //shp写入子图形坐标开始索引号((partCount-1)*4)\r\n            var onlyParts = coordinates.reduce(function (arr, coords) {\r\n                if (Array.isArray(coords[0][0])) {\r\n                    arr = arr.concat(coords);\r\n                } else {\r\n                    arr.push(coords);\r\n                }\r\n                return arr;\r\n            }, []);\r\n            for (var p = 1; p < noParts; p++) {\r\n                shpView.setInt32( // set part index\r\n                    shpI + 52 + (p * 4),\r\n                    onlyParts.reduce(function (a, b, idx) {\r\n                        return idx < p ? a + b.length : a;\r\n                    }, 0),\r\n                    true\r\n                );\r\n            }\r\n            //#endregion 写入子图形坐标开始索引号\r\n\r\n            //shp写入坐标(coorCount*16)\r\n            flattened.forEach(function writeLine(coords, i) {\r\n                shpView.setFloat64(shpI + 56 + (i * 16) + (noParts - 1) * 4, coords[0], true); // X\r\n                shpView.setFloat64(shpI + 56 + (i * 16) + (noParts - 1) * 4 + 8, coords[1], true); // Y\r\n            });\r\n\r\n            //shp文件下一个图形写入起始位置\r\n            shpI += contentLength + headerLength;\r\n            //#endregion shx文件\r\n        }.bind(this));\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc \r\n     */\r\n    getPartCount(geometries) {\r\n        var no = 1;\r\n        no = geometries.reduce(function (no, coords) {\r\n            no += coords.length;\r\n            if (Array.isArray(coords[0][0][0])) { // multi\r\n                no += coords.reduce(function (no, rings) {\r\n                    return no + rings.length - 1; // minus outer\r\n                }, 0);\r\n            }\r\n            return no;\r\n        }, 0);\r\n        return no;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getExtent() {\r\n        return this.getFlattened(this.geometries_).reduce(function (extent, c) {\r\n            return ext.extendCoordinate(extent, c);\r\n        }, ext.createEmpty());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getShpLength() {\r\n        return (this.geometries_.length * 52) + this.getPartCount(this.geometries_) * 4 +\r\n            // points\r\n            (this.getFlattened(this.geometries_).length * 16);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getShxLength() {\r\n        return this.geometries_.length * 8;\r\n    }\r\n}\r\n\r\nexport default PolyWriter;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/Lib\r\n */\r\n\r\n/**\r\n * 左补位\r\n * @param {string} str 原字符串\r\n * @param {number} len 目标字符串长度\r\n * @param {string} char 补位字符\r\n * @returns {string} 补位后的字符串\r\n */\r\nexport function lpad(str, len, char) {\r\n    while (str.length < len) { str = char + str; } return str;\r\n};\r\n\r\n/**\r\n * 右补位\r\n * @param {string} str 原字符串\r\n * @param {number} len 目标字符串长度\r\n * @param {string} char 补位字符\r\n * @returns {string} 补位后的字符串\r\n */\r\nexport function rpad(str, len, char) {\r\n    while (str.length < len) { str = str + char; } return str;\r\n};\r\n\r\n/**\r\n * 修改\r\n * 作者:潘知悦\r\n * 描述:中文乱码问题\r\n * @param {object} view\r\n * @param {number} fieldLength\r\n * @param {string} str\r\n * @param {number} offset\r\n * @returns {number}\r\n */\r\nexport function writeField(view, fieldLength, str, offset) {\r\n    let uint8Array = stringToUint8Array(str);\r\n    for (var i = 0; i < fieldLength; i++) {\r\n        view.setUint8(offset, uint8Array[i]);\r\n        offset++;\r\n    }\r\n    return offset;\r\n};\r\n/**\r\n * 字符串转Uint8Array\r\n * @param {string} string\r\n * @param {Object} options \r\n * @param {boolean} [options.stream] 是否为流\r\n */\r\nexport function stringToUint8Array(string, options = { stream: false }) {\r\n    if (options.stream) {\r\n        throw new Error(`Failed to encode: the 'stream' option is unsupported.`);\r\n    }\r\n\r\n    let pos = 0;\r\n    const len = string.length;\r\n    const out = [];\r\n\r\n    let at = 0;  // output position\r\n    let tlen = Math.max(32, len + (len >> 1) + 7);  // 1.5x size\r\n    let target = new Uint8Array((tlen >> 3) << 3);  // ... but at 8 byte offset\r\n\r\n    while (pos < len) {\r\n        let value = string.charCodeAt(pos++);\r\n        if (value >= 0xd800 && value <= 0xdbff) {\r\n            // high surrogate\r\n            if (pos < len) {\r\n                const extra = string.charCodeAt(pos);\r\n                if ((extra & 0xfc00) === 0xdc00) {\r\n                    ++pos;\r\n                    value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\r\n                }\r\n            }\r\n            if (value >= 0xd800 && value <= 0xdbff) {\r\n                continue;  // drop lone surrogate\r\n            }\r\n        }\r\n\r\n        // expand the buffer if we couldn't write 4 bytes\r\n        if (at + 4 > target.length) {\r\n            tlen += 8;  // minimum extra\r\n            tlen *= (1.0 + (pos / string.length) * 2);  // take 2x the remaining\r\n            tlen = (tlen >> 3) << 3;  // 8 byte offset\r\n\r\n            const update = new Uint8Array(tlen);\r\n            update.set(target);\r\n            target = update;\r\n        }\r\n\r\n        if ((value & 0xffffff80) === 0) {  // 1-byte\r\n            target[at++] = value;  // ASCII\r\n            continue;\r\n        } else if ((value & 0xfffff800) === 0) {  // 2-byte\r\n            target[at++] = ((value >> 6) & 0x1f) | 0xc0;\r\n        } else if ((value & 0xffff0000) === 0) {  // 3-byte\r\n            target[at++] = ((value >> 12) & 0x0f) | 0xe0;\r\n            target[at++] = ((value >> 6) & 0x3f) | 0x80;\r\n        } else if ((value & 0xffe00000) === 0) {  // 4-byte\r\n            target[at++] = ((value >> 18) & 0x07) | 0xf0;\r\n            target[at++] = ((value >> 12) & 0x3f) | 0x80;\r\n            target[at++] = ((value >> 6) & 0x3f) | 0x80;\r\n        } else {\r\n            // FIXME: do we care\r\n            continue;\r\n        }\r\n\r\n        target[at++] = (value & 0x3f) | 0x80;\r\n    }\r\n\r\n    return target.slice(0, at);\r\n}\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/FieldSize\r\n */\r\n\r\n/**\r\n * dbf中各种数据格式的大小 \r\n * @enum {number}\r\n */\r\nconst FieldSize = {\r\n    /**\r\n     * 字符串\r\n     */\r\n    C: 254,\r\n    /**\r\n     * 布尔\r\n     */\r\n    L: 1,\r\n    /**\r\n     * 日期时间\r\n     */\r\n    D: 8,\r\n    /**\r\n     * 数值\r\n     */\r\n    N: 18,\r\n    /**\r\n     * 数值\r\n     */\r\n    M: 18,\r\n    /**\r\n     * 数值,浮点数\r\n     */\r\n    F: 18,\r\n    /**\r\n     * 数值\r\n     */\r\n    B: 8\r\n};\r\n\r\nexport default FieldSize;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/FieldType\r\n */\r\n\r\n/**\r\n * 字段类型\r\n * @enum {string}\r\n */\r\nvar FieldType = {\r\n    /**\r\n     * 字符串\r\n     */\r\n    string: 'C',\r\n\r\n    /**\r\n     * 数值\r\n     */\r\n    number: 'N',\r\n\r\n    /**\r\n     * 布尔\r\n     */\r\n    boolean: 'L',\r\n\r\n    /**\r\n     * 字段的所有值都为null时要使用的类型\r\n     */\r\n    null: 'C'\r\n};\r\n\r\nexport default FieldType;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/Field\r\n */\r\n\r\nimport FieldSize from './FieldSize.js'\r\nimport FieldType from './FieldType.js'\r\n\r\n/**\r\n * @typedef {Object} Field\r\n * @property {string} Field.name 字段名称\r\n * @property {module:GeoJson2Shp/Dbf/FieldType} Field.type 字段类型\r\n * @property {number} Field.size 字段大小\r\n * \r\n */\r\n\r\n/**\r\n * 属性数组所有字段定义\r\n * @param {Array.<Object>} features 属性数组\r\n * @return {Array.<module:GeoJson2Shp/Dbf/Field~Field>} 属性数组所有字段定义\r\n * \r\n * @example \r\n * var features=[{\"NAME\":\"测试点\",\"aa\":\"20\"},{\"NAME\":\"1\",\"aa\":\"21\"},{\"NAME\":\"2\",\"aa\":\"22\"},{\"NAME\":\"3\",\"aa\":\"23\"},{\"NAME\":\"4\",\"aa\":\"24\"},{\"NAME\":\"5\",\"aa\":\"25\"}];\r\n * multi(features)\r\n * //结果:[{\"name\":\"NAME\",\"type\":\"C\",\"size\":254},{\"name\":\"aa\",\"type\":\"C\",\"size\":254}]\r\n */\r\nexport function multi(features) {\r\n    var fields = {};\r\n\r\n    //合并属性对象对象\r\n    features.forEach(collect);\r\n    function collect(f) { inherit(fields, f); }\r\n\r\n    return obj(fields);\r\n}\r\n\r\n/**\r\n * 合并对象a,b,类似jquery的extend\r\n * @param {Object} a\r\n * @param {Object} b\r\n * @returns {Object} 合并后的对象\r\n * \r\n * @example \r\n * var a={\"T\":\"\"};\r\n * var b={\"NAME\":\"测试点\",\"aa\":\"20\"};\r\n * inherit(a,b)\r\n * //结果:{\"T\":\"\",\"NAME\":\"测试点\",\"aa\":\"20\"}\r\n */\r\nexport function inherit(a, b) {\r\n    for (var i in b) {\r\n        var isDef = typeof b[i] !== 'undefined' && b[i] !== null;\r\n        if (typeof a[i] === 'undefined' || isDef) {\r\n            a[i] = b[i];\r\n        }\r\n    }\r\n    return a;\r\n}\r\n\r\n/**\r\n * 属性对象转为字段定义\r\n * @param {Object} _ 属性对象\r\n * @return {Array.<module:GeoJson2Shp/Dbf/Field~Field>} 字段定义\r\n */\r\nexport function obj(_) {\r\n    var fields = {}, o = [];\r\n    for (var p in _) fields[p] = _[p] === null ? 'null' : typeof _[p];\r\n    for (var n in fields) {\r\n        var t = FieldType[fields[n]];\r\n        if (t) {\r\n            o.push({\r\n                name: n,   //字段名称\r\n                type: t,   //字段类型\r\n                size: FieldSize[t]  //字段大小\r\n            });\r\n        }\r\n    }\r\n    return o;\r\n}\r\n\r\n\r\n\r\nexport default undefined;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/Write\r\n */\r\n\r\nimport * as Lib from '../Lib.js'\r\nimport * as Field from './Field.js'\r\n\r\n/**\r\n * 根据属性对象与字段定义生成dbf文件流,字段定义可不传,通过属性对象进行生成\r\n * dbf文件结构\r\n *\r\n *           _______________________  _______\r\n * 00h /   0| 版本号(dBase III)     |  ^\r\n *          |-----------------------|  |\r\n * 01h /   1|  最后更新时间(年)     |  |\r\n * 02h /   2|  最后更新时间(月)     |  |\r\n * 03h /   3|  最后更新时间(日)     |  |\r\n *          |-----------------------|  |\r\n * 04h /   4| 记录数量              | Record\r\n * 05h /   5|                       | header\r\n * 06h /   6|                       |  |\r\n * 07h /   7|                       |  |\r\n *          |-----------------------|  |\r\n * 08h /   8| 文件头信息长度        |  |\r\n * 09h /   9|                       |  |\r\n *          |-----------------------|  |\r\n * 0Ah /  10| 每条记录的长度        |  |\r\n * 0Bh /  11|                       |  |\r\n *          |-----------------------|  |\r\n * 0Ch /  12| ( Reserved )        *3|  |\r\n * 0Dh /  13|                       |  |\r\n *          |-----------------------|  |\r\n * 0Eh /  14| Incomplete transac.*12|  |\r\n *          |-----------------------|  |\r\n * 0Fh /  15| Encryption flag    *13|  |\r\n *          |-----------------------|  |\r\n * 10h /  16| Free record thread    |  |\r\n * 11h /  17| (reserved for LAN     |  |\r\n * 12h /  18|  only )               |  |\r\n * 13h /  19|                       |  |\r\n *          |-----------------------|  |\r\n * 14h /  20| ( Reserved for        |  |            _        |=======================| ______\r\n *          |   multi-user dBASE )  |  |           / 00h /  0| Field name in ASCII   |  ^\r\n *          : ( dBASE III+ - )      :  |          /          : (terminated by 00h)   :  |\r\n *          :                       :  |         |           |                       |  |\r\n * 1Bh /  27|                       |  |         |   0Ah / 10|                       |  |\r\n *          |-----------------------|  |         |           |-----------------------| For\r\n * 1Ch /  28| MDX flag (dBASE IV)*14|  |         |   0Bh / 11| Field type (ASCII) *20| each\r\n *          |-----------------------|  |         |           |-----------------------| field\r\n * 1Dh /  29| Language driver     *5|  |        /    0Ch / 12| Field data address    |  |\r\n *          |-----------------------|  |       /             |                     *6|  |\r\n * 1Eh /  30| ( Reserved )          |  |      /              | (in memory !!!)       |  |\r\n * 1Fh /  31|                     *3|  |     /       0Fh / 15| (dBASE III+)          |  |\r\n *          |=======================|__|____/                |-----------------------|  |  -\r\n * 20h /  32|                       |  |  ^          10h / 16| Field length       *22|  |   |\r\n *          |- - - - - - - - - - - -|  |  |                  |-----------------------|  |   | *7\r\n *          |                    *19|  |  |          11h / 17| Decimal count      *23|  |   |\r\n *          |- - - - - - - - - - - -|  |  Field              |-----------------------|  |  -\r\n *          |                       |  | Descriptor  12h / 18| ( Reserved for        |  |\r\n *          :. . . . . . . . . . . .:  |  |array     13h / 19|   multi-user dBASE)*18|  |\r\n *          :                       :  |  |                  |-----------------------|  |\r\n *       n  |                       |__|__v_         14h / 20| Work area ID       *16|  |\r\n *          |-----------------------|  |    \\                |-----------------------|  |\r\n *       n+1| Terminator (0Dh)      |  |     \\       15h / 21| ( Reserved for        |  |\r\n *          |=======================|  |      \\      16h / 22|   multi-user dBASE )  |  |\r\n *       m  | Database Container    |  |       \\             |-----------------------|  |\r\n *          :                    *15:  |        \\    17h / 23| Flag for SET FIELDS   |  |\r\n *          :                       :  |         |           |-----------------------|  |\r\n *     / m+263                      |  |         |   18h / 24| ( Reserved )          |  |\r\n *          |=======================|__v_ ___    |           :                       :  |\r\n *          :                       :    ^       |           :                       :  |\r\n *          :                       :    |       |           :                       :  |\r\n *          :                       :    |       |   1Eh / 30|                       |  |\r\n *          | Record structure      |    |       |           |-----------------------|  |\r\n *          |                       |    |        \\  1Fh / 31| Index field flag    *8|  |\r\n *          |                       |    |         \\_        |=======================| _v_____\r\n *          |                       | Records\r\n *          |-----------------------|    |\r\n *          |                       |    |          _        |=======================| _______\r\n *          |                       |    |         / 00h /  0| Record deleted flag *9|  ^\r\n *          |                       |    |        /          |-----------------------|  |\r\n *          |                       |    |       /           | Data               *10|  One\r\n *          |                       |    |      /            : (ASCII)            *17: record\r\n *          |                       |____|_____/             |                       |  |\r\n *          :                       :    |                   |                       | _v_____\r\n *          :                       :____|_____              |=======================|\r\n *          :                       :    |\r\n *          |                       |    |\r\n *          |                       |    |\r\n *          |                       |    |\r\n *          |                       |    |\r\n *          |                       |    |\r\n *          |=======================|    |\r\n *          |__文件结束标识__________| ___v____  文件结束标识 ( 1Ah )  *11\r\n * \r\n */\r\nclass Writer {\r\n    /**\r\n     * \r\n     * @param {Array.<Object>} data 属性对象\r\n     * @param {Array.<module:GeoJson2Shp/Dbf/Field~Field>} field_meta  字段定义\r\n     */\r\n    constructor(data, field_meta) {\r\n\r\n        /**\r\n         * 字段定义\r\n         * @type  {Array.<module:GeoJson2Shp/Dbf/Field~Field>}\r\n         */\r\n        this.field_meta_ = field_meta || Field.multi(data);\r\n\r\n        /**\r\n         * 字段定义\r\n         * @type {Array.<Object>}\r\n         */\r\n        this.data_ = data;\r\n    }\r\n\r\n    /**\r\n     * 写入dbf文件\r\n     * @param {function} callback 回调函数\r\n     */\r\n    write(callback) {\r\n\r\n        /**\r\n         * 字段描述长度\r\n         * @type {number}\r\n         */\r\n        var fieldDescLength = (32 * this.field_meta_.length);\r\n\r\n        /**\r\n         * 每条记录所占长度(包括删除标记)\r\n         * @type {number}\r\n         */\r\n        var bytesPerRecord = this.getBytesPerRecord(this.field_meta_);\r\n\r\n        /**\r\n         * dbf文件流\r\n         * @type {ArrayBuffer}\r\n         */\r\n        var buffer = new ArrayBuffer(\r\n            // 文件头信息长度\r\n            32 +\r\n            // 字段描述长度\r\n            fieldDescLength +\r\n            //描述信息结束\r\n            1 +\r\n            // 属性数据长度\r\n            (bytesPerRecord * this.data_.length) +\r\n            // 文件结束标识\r\n            1\r\n        );\r\n\r\n        /**\r\n         * 当前时间\r\n         * @type {Date}\r\n         */\r\n        var now = new Date();\r\n\r\n        /**\r\n         * dbf文件视图\r\n         * @type {DataView}\r\n         */\r\n        var view = new DataView(buffer);\r\n\r\n        // 版本号 - dBase III(1)\r\n        view.setUint8(0, 0x03);\r\n        // 最后一次更新日期\r\n        //当前年-1900(1)\r\n        view.setUint8(1, now.getFullYear() - 1900);\r\n        //当前月(1)\r\n        view.setUint8(2, now.getMonth());\r\n        //当前日(1)\r\n        view.setUint8(3, now.getDate());\r\n        // 记录数(4)\r\n        view.setUint32(4, this.data_.length, true);\r\n\r\n        // 文件头信息长度(2)\r\n        var headerLength = fieldDescLength + 32 + 1;\r\n        view.setUint16(8, headerLength, true);\r\n        // 每条记录的长度\r\n        view.setUint16(10, bytesPerRecord, true);\r\n\r\n        // 描述信息结束(1)\r\n        view.setInt8(32 + fieldDescLength, 0x0D);\r\n\r\n        //字段描述(字段数量*32)\r\n        this.field_meta_.forEach(function (f, i) {\r\n            //字段名称占10位\r\n            let name = f.name.slice(0, 10);\r\n            name = Lib.rpad(name, 10, \" \");\r\n            let uint8Array = Lib.stringToUint8Array(name);\r\n\r\n            for (let index = 0; index < 10; index++) {\r\n                view.setInt8(32 + i * 32 + index, uint8Array[index]);\r\n            }\r\n\r\n            // 字段类型(5)\r\n            view.setInt8(32 + i * 32 + 11, f.type.charCodeAt(0));\r\n            // 字段长度(1)\r\n            view.setInt8(32 + i * 32 + 16, f.size);\r\n            if (f.type == 'N') view.setInt8(32 + i * 32 + 17, 3);\r\n        });\r\n\r\n        var offset = fieldDescLength + 32 + 1;\r\n\r\n        //记录\r\n        this.data_.forEach(function (row, num) {\r\n            // 删除标记\r\n            view.setUint8(offset, 32);\r\n            offset++;\r\n            this.field_meta_.forEach(function (f) {\r\n                var val = row[f.name];\r\n                if (val === null || typeof val === 'undefined') val = '';\r\n\r\n                switch (f.type) {\r\n                    // boolean\r\n                    case 'L':\r\n                        view.setUint8(offset, val ? 84 : 70);\r\n                        offset++;\r\n                        break;\r\n\r\n                    // date\r\n                    case 'D':\r\n                        offset = this.writeField_(view, 8,\r\n                            Lib.lpad(val.toString(), 8, ' '), offset);\r\n                        break;\r\n\r\n                    // number\r\n                    case 'N':\r\n                        offset = this.writeField_(view, f.size,\r\n                            Lib.lpad(val.toString(), f.size, ' ').substr(0, 18),\r\n                            offset);\r\n                        break;\r\n\r\n                    // string\r\n                    case 'C':\r\n                        offset = this.writeField_(view, f.size,\r\n                            Lib.rpad(val.toString(), f.size, ' '), offset);\r\n                        break;\r\n\r\n                    default:\r\n                        throw new Error('Unknown field type');\r\n                }\r\n            }.bind(this));\r\n        }.bind(this));\r\n\r\n        // 文件结束表示\r\n        view.setUint8(offset, 0x1A);\r\n\r\n        callback(null, {\r\n            dbf: view\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 写入字段\r\n     * @param {DataView} view dbf文件对象\r\n     * @param {number} fieldLength 字段长度\r\n     * @param {string} str 值\r\n     * @param {number} offset 写入位置\r\n     * @returns {number} 写入后流的位置\r\n     */\r\n    writeField_(view, fieldLength, str, offset) {\r\n        let uint8Array = Lib.stringToUint8Array(str);\r\n        for (var i = 0; i < fieldLength; i++) {\r\n            view.setUint8(offset, uint8Array[i]);\r\n            offset++;\r\n        }\r\n        return offset;\r\n    };\r\n\r\n    /**\r\n     * 获取每条记录所占字节数(包括删除标记)\r\n     * @param {Array.<module:GeoJson2Shp/Dbf/Field~Field>} fields 字段定义\r\n     * @returns {number} 每条记录所占长度\r\n     */\r\n    getBytesPerRecord(fields) {\r\n        // deleted flag\r\n        return fields.reduce(function (memo, f) { return memo + f.size; }, 1);\r\n    }\r\n}\r\n\r\nexport default Writer;\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/GeometryType \r\n */\r\n\r\n/**\r\n * 图形类型在shp文件中的值\r\n * @enum {number}\r\n */\r\nvar geometryType = {\r\n    NULL: 0,\r\n    POINT: 1,\r\n    POLYLINE: 3,\r\n    POLYGON: 5,\r\n    MULTIPOINT: 8,\r\n    POINTZ: 11,\r\n    POLYLINEZ: 13,\r\n    POLYGONZ: 15,\r\n    MULTIPOINTZ: 18,\r\n    POINTM: 21,\r\n    POLYLINEM: 23,\r\n    POLYGONM: 25,\r\n    MULTIPOINTM: 28,\r\n    MULTIPATCH: 31,\r\n};\r\n\r\nexport default geometryType;\r\n","﻿/**\r\n * @module GeoJson2Shp/GeoJson2Shp\r\n */\r\n\r\nimport MultiPointWriter from './Shp/MultiPointWriter.js'\r\nimport PointWriter from './Shp/PointWriter.js'\r\nimport PolyWriter from './Shp/PolyWriter.js'\r\nimport DbfWrite from './Dbf/Writer.js'\r\nimport GeometryType from './Shp/GeometryType.js'\r\n\r\n/**\r\n * GeoJson转为Shp \r\n * @api\r\n */\r\nclass GeoJson2Shp {\r\n    /**\r\n     * 构造函数\r\n     * @param {Object|string} geojson 矢量数据geojson格式\r\n     */\r\n    constructor(geojson) {\r\n\r\n        if (typeof (geojson) == \"string\") {\r\n            geojson = eval(\"(\" + geojson + \")\");\r\n        }\r\n\r\n        /**\r\n         * @type {Object|string}\r\n         * @readonly\r\n         */\r\n        this.geojson_ = geojson;\r\n    }\r\n\r\n    /**\r\n     * 写入点\r\n     * @param {Function} callback\r\n     */\r\n    writePoint(callback) {\r\n        this.write_(GeometryType.POINT, callback);\r\n    }\r\n\r\n    /**\r\n    * 写入多点\r\n    * @param {Function} callback\r\n    */\r\n    writeMultiPoint(callback) {\r\n        this.write_(GeometryType.MULTIPOINT, callback);\r\n    }\r\n\r\n    /**\r\n     * 写入线\r\n     * @param {Function} callback\r\n     */\r\n    writePolyline(callback) {\r\n        this.write_(GeometryType.POLYLINE, callback);\r\n    }\r\n\r\n    /**\r\n     * 写入面\r\n     * @param {Function} callback\r\n     */\r\n    writePolygon(callback) {\r\n        this.write_(GeometryType.POLYGON, callback);\r\n    }\r\n\r\n    /**\r\n     * 根据类型写入\r\n     * @param {module:GeoJson2Shp/Shp/GeometryType} type\r\n     * @param {Function} callback\r\n     */\r\n    write_(type, callback) {\r\n        var writeOptions = this.getWriteOptions_(type);\r\n        var writer = this.getShpWriter_(type);\r\n        if (writeOptions) {\r\n            new writer(writeOptions.geometries, writeOptions.type).write(function (err, files) {\r\n                new DbfWrite(writeOptions.properties).write(function (err, files2) {\r\n                    files.dbf = files2.dbf;\r\n                    callback(err, files);\r\n                });\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据图形类型获取shp写入器\r\n     * @param {module:GeoJson2Shp/Shp/GeometryType} type\r\n     */\r\n    getShpWriter_(type) {\r\n        var writer;\r\n        if (type == GeometryType.POINT) {\r\n            writer = PointWriter;\r\n        } else if (type == GeometryType.MULTIPOINT) {\r\n            writer = MultiPointWriter;\r\n        } else if (type == GeometryType.POLYLINE) {\r\n            writer = PolyWriter;\r\n        } else if (type == GeometryType.POLYGON) {\r\n            writer = PolyWriter;\r\n        }\r\n        return writer;\r\n    }\r\n\r\n    /**\r\n     * 获取点部分写入参数\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getPointOptions_() {\r\n        var oftype = this.geojson_.features.filter(function (f) { return f.geometry.type === \"Point\"; });\r\n        if (!oftype || oftype.length == 0) {\r\n            return null;\r\n        }\r\n        return {\r\n            geometries: oftype.map(this.justCoords_),\r\n            properties: oftype.map(this.justProps_),\r\n            type: GeometryType.POINT\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取点部分写入参数\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getMultiPointOptions_() {\r\n        var oftype = this.geojson_.features.filter(function (f) { return f.geometry.type === \"MultiPoint\"; });\r\n\r\n        if (!oftype || oftype.length == 0) {\r\n            return null;\r\n        }\r\n        return {\r\n            geometries: oftype.map(this.justCoords_),\r\n            properties: oftype.map(this.justProps_),\r\n            type: GeometryType.MULTIPOINT\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取线部分写入参数\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getPolylineOptions_() {\r\n        var oftype = this.geojson_.features.filter(function (f) { return f.geometry.type === \"LineString\" || f.geometry.type === \"MultiLineString\"; });\r\n        if (!oftype || oftype.length == 0) {\r\n            return null;\r\n        }\r\n        return {\r\n            geometries: oftype.map(this.justCoords_),\r\n            properties: oftype.map(this.justProps_),\r\n            type: GeometryType.POLYLINE\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取面部分写入参数\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getPolygonOptions_() {\r\n        var oftype = this.geojson_.features.filter(function (f) { return f.geometry.type === \"Polygon\" || f.geometry.type === \"MultiPolygon\"; });\r\n        if (!oftype || oftype.length == 0) {\r\n            return null;\r\n        }\r\n        return {\r\n            geometries: oftype.map(this.justCoords_),\r\n            properties: oftype.map(this.justProps_),\r\n            type: GeometryType.POLYGON\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据传入类型获取写入参数\r\n     * @param {module:GeoJson2Shp/Shp/GeometryType} geometryType  图形类型\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getWriteOptions_(type) {\r\n        var writeOptions;\r\n        if (type == GeometryType.POINT) {\r\n            writeOptions = this.getPointOptions_();\r\n        } else if (type == GeometryType.MULTIPOINT) {\r\n            writeOptions = this.getMultiPointOptions_();\r\n        } else if (type == GeometryType.POLYLINE) {\r\n            writeOptions = this.getPolylineOptions_();\r\n        } else if (type == GeometryType.POLYGON) {\r\n            writeOptions = this.getPolygonOptions_();\r\n        }\r\n        return writeOptions;\r\n    }\r\n\r\n    /**\r\n     * 获取GeoJson中的坐标部分\r\n     * @param {Object} t GeoJson中的feature\r\n     * @return {Array} feature中的坐标部分\r\n     */\r\n    justCoords_(t) {\r\n        if (t.geometry.type == \"LineString\" || t.geometry.type == \"MultiLineString\") {\r\n            return [t.geometry.coordinates];\r\n        } else {\r\n            return t.geometry.coordinates\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取GeoJson中的属性部分\r\n     * @param {Object} t GeoJson中的feature\r\n     * @return {Object} feature中的属性部分\r\n     */\r\n    justProps_(t) {\r\n        return t.properties;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @typedef {Object} WriteOptions\r\n * @property {Array} geometries\r\n * @property {Array} properties\r\n * @property {Array} type\r\n */\r\n\r\nexport default GeoJson2Shp;\r\n","import $GeoJson2Shp$GeoJson2Shp from './GeoJson2Shp/GeoJson2Shp';\n\nvar GeoJson2Shp = window['GeoJson2Shp'] = {};\n\nGeoJson2Shp.GeoJson2Shp = $GeoJson2Shp$GeoJson2Shp;\n"],"names":["extendCoordinate","extent","pt","xmin","xmax","ymin","ymax","createEmpty","Number","MAX_VALUE","Writer","geometries","type","this","geometries_","type_","write","callback","shpLength","getShpLength","shxLength","getShxLength","shpBuffer","ArrayBuffer","shpView","DataView","shxBuffer","shxView","getExtent","writeHeader","writeExtent","writeGeometry","setInt32","shp","shx","view","setFloat64","getPartCount","getFlattened","coords","l","undefined","reduce","memo","c","concat","bind","MultiPointWriter","super","contentLength","shpI","shxI","forEach","coordinates","i","flattened","length","featureExtent","ext.extendCoordinate","ext.createEmpty","PointWriter","PolyWriter","noParts","onlyParts","arr","Array","isArray","push","p","a","b","idx","no","rings","lpad","str","len","char","rpad","stringToUint8Array","string","options","stream","Error","let","pos","at","tlen","Math","max","target","Uint8Array","update","value","charCodeAt","extra","set","slice","const","FieldSize","C","L","D","N","M","F","B","FieldType","number","boolean","null","multi","features","fields","f","inherit","obj","isDef","_","n","o","t","name","size","data","field_meta","field_meta_","Field.multi","data_","fieldDescLength","bytesPerRecord","getBytesPerRecord","buffer","now","Date","setUint8","getFullYear","getMonth","getDate","setUint32","headerLength","setUint16","setInt8","uint8Array","Lib.stringToUint8Array","Lib.rpad","index","offset","row","num","val","writeField_","Lib.lpad","toString","substr","dbf","fieldLength","geometryType","NULL","POINT","POLYLINE","POLYGON","MULTIPOINT","POINTZ","POLYLINEZ","POLYGONZ","MULTIPOINTZ","POINTM","POLYLINEM","POLYGONM","MULTIPOINTM","MULTIPATCH","GeoJson2Shp","geojson","eval","geojson_","writePoint","write_","GeometryType","writeMultiPoint","writePolyline","writePolygon","writeOptions","getWriteOptions_","writer","getShpWriter_","err","files","DbfWrite","properties","files2","getPointOptions_","oftype","filter","geometry","map","justCoords_","justProps_","getMultiPointOptions_","getPolylineOptions_","getPolygonOptions_","window","$GeoJson2Shp$GeoJson2Shp"],"mappings":"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"}