{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/GeoJson2Shp/Shp/GeometryType.js","webpack:///./src/GeoJson2Shp/Shp/Extent.js","webpack:///./src/GeoJson2Shp/Shp/Writer.js","webpack:///./src/GeoJson2Shp/GeoJson2Shp.js","webpack:///./src/GeoJson2Shp/Shp/PolyWriter.js","webpack:///./src/GeoJson2Shp/Shp/MultiPointWriter.js","webpack:///./src/GeoJson2Shp/Shp/PointWriter.js","webpack:///./src/GeoJson2Shp/Lib.js","webpack:///./src/GeoJson2Shp/Dbf/FieldSize.js","webpack:///./src/GeoJson2Shp/Dbf/FieldType.js","webpack:///./src/GeoJson2Shp/Dbf/Field.js","webpack:///./src/GeoJson2Shp/Dbf/Writer.js","webpack:///./src/Test/DownLoad.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NULL","POINT","POLYLINE","POLYGON","MULTIPOINT","POINTZ","POLYLINEZ","POLYGONZ","MULTIPOINTZ","POINTM","POLYLINEM","POLYGONM","MULTIPOINTM","MULTIPATCH","extendCoordinate","extent","pt","xmin","xmax","ymin","ymax","createEmpty","Number","MAX_VALUE","geometries","type","this","geometries_","type_","callback","shpLength","getShpLength","shxLength","getShxLength","shpBuffer","ArrayBuffer","shpView","DataView","shxBuffer","shxView","getExtent","writeHeader","writeExtent","writeGeometry","setInt32","shp","shx","view","setFloat64","coords","undefined","reduce","memo","concat","getFlattened","GeoJson2Shp","geojson","eval","geojson_","write_","writeOptions","getWriteOptions_","writer","getShpWriter_","write","err","files","properties","files2","dbf","oftype","features","filter","f","geometry","length","map","justCoords_","justProps_","getPointOptions_","getMultiPointOptions_","getPolylineOptions_","getPolygonOptions_","coordinates","PolyWriter","super","contentLength","shpI","shxI","forEach","flattened","noParts","getPartCount","featureExtent","onlyParts","arr","Array","isArray","push","a","b","idx","no","rings","MultiPointWriter","PointWriter","lpad","str","len","char","rpad","stringToUint8Array","string","options","stream","Error","pos","at","tlen","Math","max","target","Uint8Array","charCodeAt","extra","update","set","slice","C","L","D","N","M","F","B","number","boolean","null","multi","fields","isDef","inherit","_","size","obj","data","field_meta","field_meta_","data_","fieldDescLength","bytesPerRecord","getBytesPerRecord","buffer","now","Date","setUint8","getFullYear","getMonth","getDate","setUint32","headerLength","setUint16","setInt8","uint8Array","index","offset","row","num","val","writeField_","toString","substr","fieldLength","window","onload","cpg","projection","$","zip","JSZip","layers","folder","console","log","g2s","writePoint","file","fileName","binary","writeMultiPoint","writePolyline","writePolygon","generateAsync","then","content","saveAs","zipName"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","﻿/**\r\n * @module GeoJson2Shp/Shp/GeometryType \r\n */\r\n\r\n/**\r\n * 图形类型在shp文件中的值\r\n * @enum {number}\r\n */\r\nvar geometryType = {\r\n    NULL: 0,\r\n    POINT: 1,\r\n    POLYLINE: 3,\r\n    POLYGON: 5,\r\n    MULTIPOINT: 8,\r\n    POINTZ: 11,\r\n    POLYLINEZ: 13,\r\n    POLYGONZ: 15,\r\n    MULTIPOINTZ: 18,\r\n    POINTM: 21,\r\n    POLYLINEM: 23,\r\n    POLYGONM: 25,\r\n    MULTIPOINTM: 28,\r\n    MULTIPATCH: 31,\r\n};\r\n\r\nexport default geometryType;\r\n","﻿/**\r\n * GeoJson2Shp/Shp/Extent\r\n */\r\n\r\n\r\n/**\r\n * 表示范围的对象\r\n * @typedef {Object} Extent\r\n * @property {number} Extent.xmin x最小值\r\n * @property {number} Extent.ymin y最小值\r\n * @property {number} Extent.xmax x最大值\r\n * @property {number} Extent.maxy y最大值\r\n * @api\r\n */\r\n\r\n/**\r\n * 构建包含所有给定坐标的范围。\r\n * @param {Array.<module:GeoJson2Shp/Shp/Geometry~Coordinate>} 坐标数组\r\n * @return {module:GeoJson2Shp/Shp/Extent~Extent} 范围\r\n */\r\nexport function boundingExtent(coordinates) {\r\n    const extent = createEmpty();\r\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        extendCoordinate(extent, coordinates[i]);\r\n    }\r\n    return extent;\r\n}\r\n\r\n/**\r\n * 扩展范围包含指定坐标\r\n * @param {module:GeoJson2Shp/Shp/Extent~Extent} extent 范围\r\n * @param {module:GeoJson2Shp/Shp/Geom~Coordinate} pt 坐标\r\n * @return {module:GeoJson2Shp/Shp/Extent~Extent}  合并后的范围\r\n */\r\nexport function extendCoordinate(extent, pt) {\r\n    if (pt[0] < extent.xmin) extent.xmin = pt[0];\r\n    if (pt[0] > extent.xmax) extent.xmax = pt[0];\r\n    if (pt[1] < extent.ymin) extent.ymin = pt[1];\r\n    if (pt[1] > extent.ymax) extent.ymax = pt[1];\r\n    return extent;\r\n};\r\n\r\n/**\r\n * 修改范围,使范围包含指定坐标集\r\n * @param {module:GeoJson2Shp/Shp/Extent~Extent} extent 范围.\r\n * @param {Array.<module:GeoJson2Shp/Shp/Geometry~Coordinate>} 坐标数组\r\n * @return {module:GeoJson2Shp/Shp/Extent~Extent} 修改后的范围.\r\n */\r\nexport function extendCoordinates(extent, coordinates) {\r\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        extendCoordinate(extent, coordinates[i]);\r\n    }\r\n    return extent;\r\n}\r\n\r\n\r\n/**\r\n * 合并2个范围\r\n * @param {module:GeoJson2Shp/Shp/Extent~Extent} extent1 范围1\r\n * @param {module:GeoJson2Shp/Shp/Extent~Extent} extent2  范围2\r\n * @return {module:GeoJson2Shp/Shp/Extent~Extent}  合并后的范围\r\n */\r\nexport function extendExtent(extent1, extent2) {\r\n    if (extent2.xmax > extent1.xmax) extent1.xmax = extent2.xmax;\r\n    if (extent2.xmin < extent1.xmin) extent1.xmin = extent2.xmin;\r\n    if (extent2.ymax > extent1.ymax) extent1.ymax = extent2.ymax;\r\n    if (extent2.ymin < extent1.ymin) extent1.ymin = extent2.ymin;\r\n    return extent1;\r\n};\r\n\r\n\r\n/**\r\n * 创建空范围\r\n * @return {module:GeoJson2Shp/Shp/Extent~Extent}  最小范围\r\n */\r\nexport function createEmpty() {\r\n    return {\r\n        xmin: Number.MAX_VALUE,\r\n        ymin: Number.MAX_VALUE,\r\n        xmax: -Number.MAX_VALUE,\r\n        ymax: -Number.MAX_VALUE\r\n    };\r\n};\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/Writer\r\n */\r\n\r\n/**\r\n * 写入器基类,一般用于继承,而不在程序中实例化\r\n * \r\n * shp文件流信息\r\n * -------------------------------------\r\n *          |-----------------------|  ^\r\n * 00h /   0| FileCode(9994)        |  |\r\n *          |-----------------------|  |\r\n * 01h /   4|                       |  |\r\n *          |-----------------------|  |\r\n * 02h /  24| shp文件长度           |  |  \r\n *          |-----------------------|  |\r\n * 03h /  28| 版本号(1000)          |  |\r\n *          |-----------------------|  |\r\n * 04h /  32| 几何图形类型          |  |\r\n *          |-----------------------| 文件头信息\r\n * 05h /  36| x最小值               |  |\r\n *          |-----------------------|  |\r\n * 06h /  44| y最小值               |  |\r\n *          |-----------------------|  |\r\n * 07h /  52| x最大值               |  |\r\n *          |-----------------------|  |\r\n * 08h /  60| y最大值               |  |\r\n *          |-----------------------|  |\r\n * 09h /  68|                       |  |\r\n *          |                       |  |\r\n * 0Ah / 100|=======================|__v\r\n *          |                       |  ^\r\n *          |                       |  | \r\n *          |                       |  | \r\n *          | 几何图形信息          |  | \r\n *          |                       |  | \r\n *          |                       |  | \r\n *          |                       |  |\r\n *          |-----------------------|  v \r\n * -------------------------------------\r\n * \r\n * \r\n * shx文件流信息\r\n * -------------------------------------\r\n *          |-----------------------|  ^\r\n * 00h /   0| FileCode(9994)        |  |\r\n *          |-----------------------|  |\r\n * 01h /   4|                       |  |\r\n *          |-----------------------|  |\r\n * 02h /  24| shp文件长度           |  |\r\n *          |-----------------------|  |\r\n * 03h /  28| 版本号(1000)          |  |\r\n *          |-----------------------|  |\r\n * 04h /  32| 几何图形类型          |  |\r\n *          |-----------------------| 文件头信息\r\n * 05h /  36| x最小值               |  |\r\n *          |-----------------------|  |\r\n * 06h /  44| y最小值               |  |\r\n *          |-----------------------|  |\r\n * 07h /  52| x最大值               |  |\r\n *          |-----------------------|  |\r\n * 08h /  60| y最大值               |  |\r\n *          |-----------------------|  |\r\n * 09h /  68|                       |  |\r\n *          |                       |  |            \r\n * 0Ah / 100|=======================|__v              \r\n *          |                       |  ^       _    \r\n *          |                       |  |      /  |==============================================|  ^\r\n *          | ............          |  |_____/   | 00h /   0| 几何图形流在文件中的起始位置      |  |\r\n *          | 几何图形信息          |  |_____    |----------------------------------------------|  |\r\n *          | ............          |  |     \\   | 01h /   4| 几何图形流内容长度(不包括头信息)  |  |\r\n *          |                       |  |      \\_ |==============================================|  v\r\n *          |                       |  |\r\n *          |-----------------------|  v\r\n * -------------------------------------\r\n * \r\n */\r\nclass Writer {\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param {Array.<module:GeoJson2Shp/Shp/Geometry~Geometry>} geometries 图形数组\r\n     * @param {module:GeoJson2Shp/Shp/GeometryType} type 图形类型\r\n     */\r\n    constructor(geometries, type) {\r\n        /**\r\n         * 图形数组\r\n         * @type {Array.<module:GeoJson2Shp/Shp/Geometry~Geometry>}\r\n        */\r\n        this.geometries_ = geometries;\r\n\r\n        /**\r\n         * 图形类型\r\n         * @type {module:GeoJson2Shp/Shp/GeometryType}\r\n         */\r\n        this.type_ = type;\r\n    }\r\n\r\n    /**\r\n     * 写入文件\r\n     * @param {function} callback 回调函数\r\n     */\r\n    write(callback) {\r\n\r\n        /**\r\n         * shp文件流长度 \r\n         */\r\n        var shpLength = 100 + this.getShpLength();\r\n        /**\r\n         * shx文件流长度 \r\n         */\r\n        var shxLength = 100 + this.getShxLength();\r\n\r\n        /**\r\n         * shp文件流 \r\n         */\r\n        var shpBuffer = new ArrayBuffer(shpLength);\r\n\r\n        /**\r\n         * shp文件视图 \r\n         */\r\n        var shpView = new DataView(shpBuffer);\r\n\r\n        /**\r\n         *  shx文件流\r\n         */\r\n        var shxBuffer = new ArrayBuffer(shxLength);\r\n\r\n        /**\r\n         * shx文件视图 \r\n         */\r\n        var shxView = new DataView(shxBuffer);\r\n\r\n        /**\r\n         * 范围 \r\n         */\r\n        var extent = this.getExtent();\r\n\r\n        // 写入shp文件头文件信息\r\n        this.writeHeader(shpView, this.type_);\r\n        // 写入shx文件头文件信息\r\n        this.writeHeader(shxView, this.type_);\r\n        //写入shp文件范围信息\r\n        this.writeExtent(extent, shpView);\r\n        //写入shx文件范围信息\r\n        this.writeExtent(extent, shxView);\r\n\r\n        //写入几何信息\r\n        this.writeGeometry(\r\n            new DataView(shpBuffer),\r\n            new DataView(shxBuffer));\r\n\r\n        //写入shp文件流长度\r\n        shpView.setInt32(24, shpLength / 2);\r\n        //写入shx文件流长度\r\n        shxView.setInt32(24, shxLength / 2);\r\n\r\n        callback(null, {\r\n            shp: shpView,\r\n            shx: shxView\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 写入文件头信息\r\n     * @param {DataView} view 视图\r\n     */\r\n    writeHeader(view) {\r\n        view.setInt32(0, 9994);\r\n        view.setInt32(28, 1000, true);\r\n        view.setInt32(32, this.type_, true);\r\n    }\r\n\r\n    /**\r\n     * 写入范围信息\r\n     * @param {module:GeoJson2Shp/Shp/Extent~Extent} extent  范围\r\n     * @param {DataView} view 视图\r\n     */\r\n    writeExtent(extent, view) {\r\n        view.setFloat64(36, extent.xmin, true);\r\n        view.setFloat64(44, extent.ymin, true);\r\n        view.setFloat64(52, extent.xmax, true);\r\n        view.setFloat64(60, extent.ymax, true);\r\n    }\r\n\r\n    /**\r\n     * 写入几何图形部分\r\n     * @param {any} shpView\r\n     * @param {any} shxView\r\n     */\r\n    writeGeometry(shpView, shxView) {\r\n\r\n    }\r\n\r\n    /**\r\n     * 获取shp文件长度\r\n     * @return {number} shp文件长度\r\n     */\r\n    getShpLength() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 获取shx文件长度\r\n     * @return {number} shx文件长度\r\n     */\r\n    getShxLength() {\r\n\r\n    }\r\n    /**\r\n     * 获取范围\r\n     * @return {module:GeoJson2Sho/Shp/Extent~Extent} 范围\r\n     */\r\n    getExtent() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 获取子图形数量 \r\n     * @param {any} geometries\r\n     * @return {number} 子图形数量\r\n     */\r\n    getPartCount(geometries) {\r\n    }\r\n\r\n    /**\r\n     * 获取平面坐标 \r\n     * @return {Array.<module:GeoJson2Shp/Shp/Geometry~Coordinate>} 平面坐标\r\n     */\r\n    getFlattened(coords, l) {\r\n        if (l === undefined) l = [];\r\n        if (typeof coords[0][0] == 'object') {\r\n            return coords.reduce(function (memo, c) {\r\n                return memo.concat(this.getFlattened(c));\r\n            }.bind(this), l);\r\n        } else {\r\n            return coords;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Writer;\r\n","﻿/**\r\n * @module GeoJson2Shp/GeoJson2Shp\r\n */\r\n\r\nimport MultiPointWriter from './Shp/MultiPointWriter.js'\r\nimport PointWriter from './Shp/PointWriter.js'\r\nimport PolyWriter from './Shp/PolyWriter.js'\r\nimport DbfWrite from './Dbf/Writer.js'\r\nimport GeometryType from './Shp/GeometryType.js'\r\n\r\n/**\r\n * GeoJson转为Shp \r\n * @api\r\n */\r\nclass GeoJson2Shp {\r\n    /**\r\n     * 构造函数\r\n     * @param {Object|string} geojson 矢量数据geojson格式\r\n     */\r\n    constructor(geojson) {\r\n\r\n        if (typeof (geojson) == \"string\") {\r\n            geojson = eval(\"(\" + geojson + \")\");\r\n        }\r\n\r\n        /**\r\n         * @type {Object|string}\r\n         * @readonly\r\n         */\r\n        this.geojson_ = geojson;\r\n    }\r\n\r\n    /**\r\n     * 写入点\r\n     * @param {Function} callback\r\n     */\r\n    writePoint(callback) {\r\n        this.write_(GeometryType.POINT, callback);\r\n    }\r\n\r\n    /**\r\n    * 写入多点\r\n    * @param {Function} callback\r\n    */\r\n    writeMultiPoint(callback) {\r\n        this.write_(GeometryType.MULTIPOINT, callback);\r\n    }\r\n\r\n    /**\r\n     * 写入线\r\n     * @param {Function} callback\r\n     */\r\n    writePolyline(callback) {\r\n        this.write_(GeometryType.POLYLINE, callback);\r\n    }\r\n\r\n    /**\r\n     * 写入面\r\n     * @param {Function} callback\r\n     */\r\n    writePolygon(callback) {\r\n        this.write_(GeometryType.POLYGON, callback);\r\n    }\r\n\r\n    /**\r\n     * 根据类型写入\r\n     * @param {module:GeoJson2Shp/Shp/GeometryType} type\r\n     * @param {Function} callback\r\n     */\r\n    write_(type, callback) {\r\n        var writeOptions = this.getWriteOptions_(type);\r\n        var writer = this.getShpWriter_(type);\r\n        if (writeOptions) {\r\n            new writer(writeOptions.geometries, writeOptions.type).write(function (err, files) {\r\n                new DbfWrite(writeOptions.properties).write(function (err, files2) {\r\n                    files.dbf = files2.dbf;\r\n                    callback(err, files);\r\n                });\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据图形类型获取shp写入器\r\n     * @param {module:GeoJson2Shp/Shp/GeometryType} type\r\n     */\r\n    getShpWriter_(type) {\r\n        var writer;\r\n        if (type == GeometryType.POINT) {\r\n            writer = PointWriter;\r\n        } else if (type == GeometryType.MULTIPOINT) {\r\n            writer = MultiPointWriter;\r\n        } else if (type == GeometryType.POLYLINE) {\r\n            writer = PolyWriter;\r\n        } else if (type == GeometryType.POLYGON) {\r\n            writer = PolyWriter;\r\n        }\r\n        return writer;\r\n    }\r\n\r\n    /**\r\n     * 获取点部分写入参数\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getPointOptions_() {\r\n        var oftype = this.geojson_.features.filter(function (f) { return f.geometry.type === \"Point\"; });\r\n        if (!oftype || oftype.length == 0) {\r\n            return null;\r\n        }\r\n        return {\r\n            geometries: oftype.map(this.justCoords_),\r\n            properties: oftype.map(this.justProps_),\r\n            type: GeometryType.POINT\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取点部分写入参数\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getMultiPointOptions_() {\r\n        var oftype = this.geojson_.features.filter(function (f) { return f.geometry.type === \"MultiPoint\"; });\r\n\r\n        if (!oftype || oftype.length == 0) {\r\n            return null;\r\n        }\r\n        return {\r\n            geometries: oftype.map(this.justCoords_),\r\n            properties: oftype.map(this.justProps_),\r\n            type: GeometryType.MULTIPOINT\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取线部分写入参数\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getPolylineOptions_() {\r\n        var oftype = this.geojson_.features.filter(function (f) { return f.geometry.type === \"LineString\" || f.geometry.type === \"MultiLineString\"; });\r\n        if (!oftype || oftype.length == 0) {\r\n            return null;\r\n        }\r\n        return {\r\n            geometries: oftype.map(this.justCoords_),\r\n            properties: oftype.map(this.justProps_),\r\n            type: GeometryType.POLYLINE\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取面部分写入参数\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getPolygonOptions_() {\r\n        var oftype = this.geojson_.features.filter(function (f) { return f.geometry.type === \"Polygon\" || f.geometry.type === \"MultiPolygon\"; });\r\n        if (!oftype || oftype.length == 0) {\r\n            return null;\r\n        }\r\n        return {\r\n            geometries: oftype.map(this.justCoords_),\r\n            properties: oftype.map(this.justProps_),\r\n            type: GeometryType.POLYGON\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据传入类型获取写入参数\r\n     * @param {module:GeoJson2Shp/Shp/GeometryType} geometryType  图形类型\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getWriteOptions_(type) {\r\n        var writeOptions;\r\n        if (type == GeometryType.POINT) {\r\n            writeOptions = this.getPointOptions_();\r\n        } else if (type == GeometryType.MULTIPOINT) {\r\n            writeOptions = this.getMultiPointOptions_();\r\n        } else if (type == GeometryType.POLYLINE) {\r\n            writeOptions = this.getPolylineOptions_();\r\n        } else if (type == GeometryType.POLYGON) {\r\n            writeOptions = this.getPolygonOptions_();\r\n        }\r\n        return writeOptions;\r\n    }\r\n\r\n    /**\r\n     * 获取GeoJson中的坐标部分\r\n     * @param {Object} t GeoJson中的feature\r\n     * @return {Array} feature中的坐标部分\r\n     */\r\n    justCoords_(t) {\r\n        if (t.geometry.type == \"LineString\" || t.geometry.type == \"MultiLineString\") {\r\n            return [t.geometry.coordinates];\r\n        } else {\r\n            return t.geometry.coordinates\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取GeoJson中的属性部分\r\n     * @param {Object} t GeoJson中的feature\r\n     * @return {Object} feature中的属性部分\r\n     */\r\n    justProps_(t) {\r\n        return t.properties;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @typedef {Object} WriteOptions\r\n * @property {Array} geometries\r\n * @property {Array} properties\r\n * @property {Array} type\r\n */\r\n\r\nexport default GeoJson2Shp;\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/PolyWriter\r\n */\r\n\r\nimport * as ext from './Extent.js'\r\nimport Writer from './Writer.js'\r\n\r\n/**\r\n * 线,面写入器 \r\n * \r\n * shp文件点内容\r\n * ---------------------------------------\r\n *             |=======================|  ^\r\n * 00h /      0| 记录号(表示第几个图斑)|  |\r\n *             | 从1开始               |  |\r\n *             |-----------------------|头信息\r\n * 01h /      4| 内容所占长度          |  |\r\n *             |=======================|--v\r\n * 02h /      8| 几何图形类型          |  ^\r\n *             |-----------------------|  |\r\n * 03h /     12| x最小值               |  |\r\n *             |-----------------------|  |\r\n * 04h /     20| y最小值               |  |\r\n *             |-----------------------|  |\r\n * 05h /     28| x最大值               |  |\r\n *             |-----------------------|  |\r\n * 06h /     36| y最大值               |  |\r\n *             |-----------------------|  |\r\n * 07h /     44| 子图形数量            |  |\r\n *             |-----------------------|内容\r\n * 08h /     48| 坐标点数量            |  |\r\n *             |-----------------------|  |\r\n *             | ................      |  |\r\n * 09h /       | 子图形起始坐标索引    |  |\r\n * 52+         | 从0开始               |  |\r\n * partIndex*4 | ................      |  |\r\n *             |-----------------------|  |\r\n * 0Ah /       | ................      |  |\r\n * 52+         | 坐标点                |  |\r\n * partIndex*4+| ................      |  |\r\n * coorIndex*16|                       |  |\r\n *             |-----------------------|  v\r\n * ----------------------------------------\r\n */\r\nclass PolyWriter extends Writer {\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    constructor(geometries, type) {\r\n        super(geometries, type);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    writeGeometry(shpView, shxView) {\r\n\r\n        /**\r\n         * 1个图形内容所占长度\r\n         * (1)几何类型(4)\r\n         * (2)范围(4*8=32)\r\n         * (3)子图形数量(4)\r\n         * (4)坐标数量(4)\r\n         * (5)子图形起始坐标索引(partCount*4)\r\n         * (6)坐标点(coorCount*16)\r\n         * @type {number}\r\n         */\r\n        var contentLength;\r\n\r\n        /**\r\n         * 1个图形头信息所占长度\r\n         * (1)记录号(4)\r\n         * (2)内容所占长度(4)\r\n         * @type {number}\r\n         */\r\n        var headerLength = 8;\r\n\r\n        /**\r\n         * 几何图形信息在shp文件流中起始位置\r\n         * @type {number}\r\n         */\r\n        var shpI = 100;\r\n\r\n        /**\r\n         * 几何图形信息在shx文件流中起始位置\r\n         * @type {number}\r\n         */\r\n        var shxI = 100;\r\n\r\n        //循环写入几何图形\r\n        this.geometries_.forEach(function writePolyLine(coordinates, i) {\r\n            //平面坐标\r\n            var flattened = this.getFlattened(coordinates);\r\n            //子图形数量\r\n            var noParts = this.getPartCount([coordinates], this.type_);\r\n            //内容所占长度\r\n            //几何类型(4)+范围(4*8=32)+子图形数量(4)+坐标数量(4)+子图形起始坐标索引(partCount*4)+坐标点(coorCount*16)\r\n            contentLength = 4 + 32 + 4 + 4 + (noParts) * 4 + (flattened.length * 16);\r\n            //范围\r\n            var featureExtent = flattened.reduce(function (extent, c) {\r\n                return ext.extendCoordinate(extent, c);\r\n            }, ext.createEmpty());\r\n\r\n            //#region shx文件\r\n            //shx写入几何图形在shp文件起始位值(4)\r\n            shxView.setInt32(shxI, shpI / 2);\r\n            //shx写入记录内容长度(4)\r\n            shxView.setInt32(shxI + 4, contentLength / 2);\r\n            //shx文件下一个图形写入位置:记录位移量(4)+记录长度(4)=8\r\n            shxI += 8;\r\n            //#endregion shx文件\r\n\r\n\r\n            //#region shx文件\r\n            //shp写入记录号,从1开始(4)\r\n            shpView.setInt32(shpI, i + 1);\r\n            //shp写入内容长度(4)\r\n            shpView.setInt32(shpI + 4, contentLength / 2);\r\n            //shp写入几何图形类型(4)\r\n            shpView.setInt32(shpI + 8, this.type_, true);\r\n            //shp写入范围(32)\r\n            shpView.setFloat64(shpI + 12, featureExtent.xmin, true);\r\n            shpView.setFloat64(shpI + 20, featureExtent.ymin, true);\r\n            shpView.setFloat64(shpI + 28, featureExtent.xmax, true);\r\n            shpView.setFloat64(shpI + 36, featureExtent.ymax, true);\r\n            //shp写入子图形数量(4)\r\n            shpView.setInt32(shpI + 44, noParts, true);\r\n            //shp写入坐标数量(4)\r\n            shpView.setInt32(shpI + 48, flattened.length, true);\r\n\r\n            //#region 写入子图形坐标开始索引号(partCount*4)\r\n            //shp第一个子图形坐标开始索引号(4)\r\n            shpView.setInt32(shpI + 52, 0, true);\r\n\r\n            //shp写入子图形坐标开始索引号((partCount-1)*4)\r\n            var onlyParts = coordinates.reduce(function (arr, coords) {\r\n                if (Array.isArray(coords[0][0])) {\r\n                    arr = arr.concat(coords);\r\n                } else {\r\n                    arr.push(coords);\r\n                }\r\n                return arr;\r\n            }, []);\r\n            for (var p = 1; p < noParts; p++) {\r\n                shpView.setInt32( // set part index\r\n                    shpI + 52 + (p * 4),\r\n                    onlyParts.reduce(function (a, b, idx) {\r\n                        return idx < p ? a + b.length : a;\r\n                    }, 0),\r\n                    true\r\n                );\r\n            }\r\n            //#endregion 写入子图形坐标开始索引号\r\n\r\n            //shp写入坐标(coorCount*16)\r\n            flattened.forEach(function writeLine(coords, i) {\r\n                shpView.setFloat64(shpI + 56 + (i * 16) + (noParts - 1) * 4, coords[0], true); // X\r\n                shpView.setFloat64(shpI + 56 + (i * 16) + (noParts - 1) * 4 + 8, coords[1], true); // Y\r\n            });\r\n\r\n            //shp文件下一个图形写入起始位置\r\n            shpI += contentLength + headerLength;\r\n            //#endregion shx文件\r\n        }.bind(this));\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc \r\n     */\r\n    getPartCount(geometries) {\r\n        var no = 1;\r\n        no = geometries.reduce(function (no, coords) {\r\n            no += coords.length;\r\n            if (Array.isArray(coords[0][0][0])) { // multi\r\n                no += coords.reduce(function (no, rings) {\r\n                    return no + rings.length - 1; // minus outer\r\n                }, 0);\r\n            }\r\n            return no;\r\n        }, 0);\r\n        return no;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getExtent() {\r\n        return this.getFlattened(this.geometries_).reduce(function (extent, c) {\r\n            return ext.extendCoordinate(extent, c);\r\n        }, ext.createEmpty());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getShpLength() {\r\n        return (this.geometries_.length * 52) + this.getPartCount(this.geometries_) * 4 +\r\n            // points\r\n            (this.getFlattened(this.geometries_).length * 16);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getShxLength() {\r\n        return this.geometries_.length * 8;\r\n    }\r\n}\r\n\r\nexport default PolyWriter;\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/MultiPointWriter\r\n */\r\nimport * as ext from './Extent.js'\r\nimport Writer from './Writer.js'\r\n\r\n\r\n/**\r\n * 多点写入器 \r\n * \r\n * shp文件点内容\r\n * ---------------------------------------\r\n *             |=======================|  ^\r\n * 00h /      0| 记录号(表示第几个图斑)|  |\r\n *             | 从1开始               |  |\r\n *             |-----------------------|头信息\r\n * 01h /      4| 内容所占长度          |  |\r\n *             |=======================|--v\r\n * 02h /      8| 几何图形类型          |  ^\r\n *             |-----------------------|  |\r\n * 03h /     12| x最小值               |  |\r\n *             |-----------------------|  |\r\n * 04h /     20| y最小值               |  |\r\n *             |-----------------------|  |\r\n * 05h /     28| x最大值               |  |\r\n *             |-----------------------|  |\r\n * 06h /     36| y最大值               | 内容\r\n *             |-----------------------|  |\r\n * 07h /     44| 坐标点数量            |  |\r\n *             |-----------------------|  |\r\n * 08h /       | ................      |  |\r\n * 48+         | 坐标点                |  |\r\n * partIndex*4+| ................      |  |\r\n * coorIndex*16|                       |  |\r\n *             |-----------------------|  v\r\n * ----------------------------------------\r\n */\r\nclass MultiPointWriter extends Writer {\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    constructor(geometries, type) {\r\n        super(geometries, type);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    writeGeometry(shpView, shxView) {\r\n\r\n        /**\r\n         * 1个图形内容所占长度\r\n         * (1)几何类型(4)\r\n         * (2)范围(4*8=32)\r\n         * (4)坐标数量(4)\r\n         * (6)坐标点(coorCount*16)\r\n         * @type {number}\r\n         */\r\n        var contentLength;\r\n\r\n        /**\r\n         * 1个图形头信息所占长度\r\n         * (1)记录号(4)\r\n         * (2)内容所占长度(4)\r\n         * @type {number}\r\n         */\r\n        var headerLength = 8;\r\n\r\n        /**\r\n         * 几何图形信息在shp文件流中起始位置\r\n         * @type {number}\r\n         */\r\n        var shpI = 100;\r\n\r\n        /**\r\n         * 几何图形信息在shx文件流中起始位置\r\n         * @type {number}\r\n         */\r\n        var shxI = 100;\r\n\r\n        //循环写入几何图形\r\n        this.geometries_.forEach(\r\n            function writeMultiPoint(coordinates, i) {\r\n                //平面坐标\r\n                var flattened = this.getFlattened(coordinates);\r\n                //内容所占长度\r\n                //几何类型(4)+范围(4*8=32)+坐标数量(4)+坐标点(coorCount*16)\r\n                contentLength = 4 + 32 + 4 + (flattened.length * 16);\r\n\r\n                //范围\r\n                var featureExtent = flattened.reduce(function (extent, c) {\r\n                    return ext.extendCoordinate(extent, c);\r\n                }, ext.createEmpty());\r\n\r\n                //#region shx文件\r\n                //shx写入几何图形在shp文件起始位值(4)\r\n                shxView.setInt32(shxI, shpI / 2);\r\n                //shx写入记录内容长度(4)\r\n                shxView.setInt32(shxI + 4, contentLength / 2);\r\n                //shx文件下一个图形写入位置:记录位移量(4)+记录长度(4)=8\r\n                shxI += 8;\r\n                //#endregion shx文件\r\n\r\n                //#region shx文件\r\n                //shp写入记录号,从1开始(4)\r\n                shpView.setInt32(shpI, i + 1);\r\n                //shp写入内容长度(4)\r\n                shpView.setInt32(shpI + 4, contentLength / 2);\r\n                //shp写入几何图形类型(4)\r\n                shpView.setInt32(shpI + 8, this.type_, true);\r\n                //shp写入范围(32)\r\n                shpView.setFloat64(shpI + 12, featureExtent.xmin, true);\r\n                shpView.setFloat64(shpI + 20, featureExtent.ymin, true);\r\n                shpView.setFloat64(shpI + 28, featureExtent.xmax, true);\r\n                shpView.setFloat64(shpI + 36, featureExtent.ymax, true);\r\n                //shp写入坐标数量(4)\r\n                shpView.setInt32(shpI + 44, flattened.length, true);\r\n                //shp写入坐标(coorCount*16)\r\n                flattened.forEach(function writeLine(coords, i) {\r\n                    shpView.setFloat64(shpI + 48 + (i * 16), coords[0], true); // X\r\n                    shpView.setFloat64(shpI + 48 + (i * 16) + 8, coords[1], true); // Y\r\n                });\r\n                //shp文件下一个图形写入起始位置\r\n                shpI += contentLength + headerLength;\r\n                //#endregion shx文件\r\n            }.bind(this));\r\n    }\r\n\r\n    /** \r\n     * @inheritdoc\r\n     */\r\n    getPartCount(geometries) {\r\n        return geometries.length;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getExtent() {\r\n        return this.getFlattened(this.geometries_).reduce(function (extent, c) {\r\n            return ext.extendCoordinate(extent, c);\r\n        }, ext.createEmpty());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc \r\n     */\r\n    getShxLength() {\r\n        return this.geometries_.length * 8;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc \r\n     */\r\n    getShpLength() {\r\n        return (this.geometries_.length * 48) +\r\n            // points\r\n            (this.getFlattened(this.geometries_).length * 16);\r\n    }\r\n}\r\n\r\nexport default MultiPointWriter;\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/PointsWriter\r\n */\r\n\r\nimport * as ext from './Extent.js'\r\nimport Writer from './Writer.js'\r\n\r\n/**\r\n * @description\r\n * 点写入器 \r\n * shp文件点内容\r\n *          |=======================|  ^\r\n * 00h /   0| 记录号(表示第几个图斑)|  |\r\n *          | 从1开始               |  |                  \r\n *          |-----------------------|头信息\r\n * 01h /   4| 内容所占长度          |  |\r\n *          |=======================|--v\r\n * 02h /   8| 几何图形类型          |  ^\r\n *          |-----------------------|  |\r\n * 03h /  12| x坐标                 |  内容\r\n *          |-----------------------|  |\r\n * 04h /  20| y坐标                 |  |\r\n *          |-----------------------|  v\r\n */\r\nclass PointWriter extends Writer {\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    constructor(geometries, type) {\r\n        super(geometries, type);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    writeGeometry(shpView, shxView) {\r\n\r\n        /**\r\n         * 1个图形内容所占长度\r\n         * (1)几何类型(4)\r\n         * (2)x坐标(8)\r\n         * (3)y坐标(8)\r\n         * @type {number}\r\n         */\r\n        var contentLength = 20;\r\n\r\n        /**\r\n         * 1个图形头信息所占长度\r\n         * (1)记录号(4)\r\n         * (2)内容所占长度(4)\r\n         * @type {number}\r\n         */\r\n        var headerLength = 8;\r\n\r\n        /**\r\n         * 几何图形信息在shp文件流中起始位置 \r\n         * @type {number}\r\n         */\r\n        var shpI = 100;\r\n\r\n        /**\r\n         * 几何图形信息在shx文件流中起始位置\r\n         * @type {number}\r\n         */\r\n        var shxI = 100;\r\n\r\n        //循环写入几何图形\r\n        this.geometries_.forEach(function writePoint(coords, i) {\r\n            //#region shx文件\r\n            //shx写入几何图形在shp文件起始位值(4)\r\n            shxView.setInt32(shxI, shpI / 2);\r\n            //shx写入记录内容长度(4)   (图形类型+x坐标+y坐标)/2=(4+8+8)/2 =20\r\n            shxView.setInt32(shxI + 4, contentLength / 2);\r\n            //shx文件下一个图形写入位置:记录位移量(4)+记录长度(4)=8\r\n            shxI += 8;\r\n            //#endregion shx文件\r\n\r\n            //#region shp文件\r\n            //shp写入记录号,从1开始(4)\r\n            shpView.setInt32(shpI, i + 1);\r\n            //shp写入内容长度(4)\r\n            shpView.setInt32(shpI + 4, contentLength / 2);\r\n            //shp写入几何图形类型(4)\r\n            shpView.setInt32(shpI + 8, this.type_, true);\r\n            //shp写入x坐标(8)\r\n            shpView.setFloat64(shpI + 12, coords[0], true);\r\n            //shp写入y坐标(8)\r\n            shpView.setFloat64(shpI + 20, coords[1], true);\r\n\r\n            //shp文件下一个图形写入起始位置\r\n            shpI += contentLength + headerLength;\r\n            //#endregion shp文件\r\n\r\n        }.bind(this));\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc \r\n     */\r\n    getPartCount(geometries) {\r\n        return geometries.length;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getExtent() {\r\n        return this.geometries_.reduce(function (extent, coords) {\r\n            return ext.extendCoordinate(extent, coords);\r\n        }, ext.createEmpty());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getShpLength() {\r\n        return this.geometries_.length * 28;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    getShxLength() {\r\n        return this.geometries_.length * 8;\r\n    }\r\n}\r\n\r\nexport default PointWriter;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/Lib\r\n */\r\n\r\n/**\r\n * 左补位\r\n * @param {string} str 原字符串\r\n * @param {number} len 目标字符串长度\r\n * @param {string} char 补位字符\r\n * @returns {string} 补位后的字符串\r\n */\r\nexport function lpad(str, len, char) {\r\n    while (str.length < len) { str = char + str; } return str;\r\n};\r\n\r\n/**\r\n * 右补位\r\n * @param {string} str 原字符串\r\n * @param {number} len 目标字符串长度\r\n * @param {string} char 补位字符\r\n * @returns {string} 补位后的字符串\r\n */\r\nexport function rpad(str, len, char) {\r\n    while (str.length < len) { str = str + char; } return str;\r\n};\r\n\r\n/**\r\n * 修改\r\n * 作者:潘知悦\r\n * 描述:中文乱码问题\r\n * @param {object} view\r\n * @param {number} fieldLength\r\n * @param {string} str\r\n * @param {number} offset\r\n * @returns {number}\r\n */\r\nexport function writeField(view, fieldLength, str, offset) {\r\n    let uint8Array = stringToUint8Array(str);\r\n    for (var i = 0; i < fieldLength; i++) {\r\n        view.setUint8(offset, uint8Array[i]);\r\n        offset++;\r\n    }\r\n    return offset;\r\n};\r\n/**\r\n * 字符串转Uint8Array\r\n * @param {string} string\r\n * @param {Object} options \r\n * @param {boolean} [options.stream] 是否为流\r\n */\r\nexport function stringToUint8Array(string, options = { stream: false }) {\r\n    if (options.stream) {\r\n        throw new Error(`Failed to encode: the 'stream' option is unsupported.`);\r\n    }\r\n\r\n    let pos = 0;\r\n    const len = string.length;\r\n    const out = [];\r\n\r\n    let at = 0;  // output position\r\n    let tlen = Math.max(32, len + (len >> 1) + 7);  // 1.5x size\r\n    let target = new Uint8Array((tlen >> 3) << 3);  // ... but at 8 byte offset\r\n\r\n    while (pos < len) {\r\n        let value = string.charCodeAt(pos++);\r\n        if (value >= 0xd800 && value <= 0xdbff) {\r\n            // high surrogate\r\n            if (pos < len) {\r\n                const extra = string.charCodeAt(pos);\r\n                if ((extra & 0xfc00) === 0xdc00) {\r\n                    ++pos;\r\n                    value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\r\n                }\r\n            }\r\n            if (value >= 0xd800 && value <= 0xdbff) {\r\n                continue;  // drop lone surrogate\r\n            }\r\n        }\r\n\r\n        // expand the buffer if we couldn't write 4 bytes\r\n        if (at + 4 > target.length) {\r\n            tlen += 8;  // minimum extra\r\n            tlen *= (1.0 + (pos / string.length) * 2);  // take 2x the remaining\r\n            tlen = (tlen >> 3) << 3;  // 8 byte offset\r\n\r\n            const update = new Uint8Array(tlen);\r\n            update.set(target);\r\n            target = update;\r\n        }\r\n\r\n        if ((value & 0xffffff80) === 0) {  // 1-byte\r\n            target[at++] = value;  // ASCII\r\n            continue;\r\n        } else if ((value & 0xfffff800) === 0) {  // 2-byte\r\n            target[at++] = ((value >> 6) & 0x1f) | 0xc0;\r\n        } else if ((value & 0xffff0000) === 0) {  // 3-byte\r\n            target[at++] = ((value >> 12) & 0x0f) | 0xe0;\r\n            target[at++] = ((value >> 6) & 0x3f) | 0x80;\r\n        } else if ((value & 0xffe00000) === 0) {  // 4-byte\r\n            target[at++] = ((value >> 18) & 0x07) | 0xf0;\r\n            target[at++] = ((value >> 12) & 0x3f) | 0x80;\r\n            target[at++] = ((value >> 6) & 0x3f) | 0x80;\r\n        } else {\r\n            // FIXME: do we care\r\n            continue;\r\n        }\r\n\r\n        target[at++] = (value & 0x3f) | 0x80;\r\n    }\r\n\r\n    return target.slice(0, at);\r\n}\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/FieldSize\r\n */\r\n\r\n/**\r\n * dbf中各种数据格式的大小 \r\n * @enum {number}\r\n */\r\nconst FieldSize = {\r\n    /**\r\n     * 字符串\r\n     */\r\n    C: 254,\r\n    /**\r\n     * 布尔\r\n     */\r\n    L: 1,\r\n    /**\r\n     * 日期时间\r\n     */\r\n    D: 8,\r\n    /**\r\n     * 数值\r\n     */\r\n    N: 18,\r\n    /**\r\n     * 数值\r\n     */\r\n    M: 18,\r\n    /**\r\n     * 数值,浮点数\r\n     */\r\n    F: 18,\r\n    /**\r\n     * 数值\r\n     */\r\n    B: 8\r\n};\r\n\r\nexport default FieldSize;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/FieldType\r\n */\r\n\r\n/**\r\n * 字段类型\r\n * @enum {string}\r\n */\r\nvar FieldType = {\r\n    /**\r\n     * 字符串\r\n     */\r\n    string: 'C',\r\n\r\n    /**\r\n     * 数值\r\n     */\r\n    number: 'N',\r\n\r\n    /**\r\n     * 布尔\r\n     */\r\n    boolean: 'L',\r\n\r\n    /**\r\n     * 字段的所有值都为null时要使用的类型\r\n     */\r\n    null: 'C'\r\n};\r\n\r\nexport default FieldType;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/Field\r\n */\r\n\r\nimport FieldSize from './FieldSize.js'\r\nimport FieldType from './FieldType.js'\r\n\r\n/**\r\n * @typedef {Object} Field\r\n * @property {string} Field.name 字段名称\r\n * @property {module:GeoJson2Shp/Dbf/FieldType} Field.type 字段类型\r\n * @property {number} Field.size 字段大小\r\n * \r\n */\r\n\r\n/**\r\n * 属性数组所有字段定义\r\n * @param {Array.<Object>} features 属性数组\r\n * @return {Array.<module:GeoJson2Shp/Dbf/Field~Field>} 属性数组所有字段定义\r\n * \r\n * @example \r\n * var features=[{\"NAME\":\"测试点\",\"aa\":\"20\"},{\"NAME\":\"1\",\"aa\":\"21\"},{\"NAME\":\"2\",\"aa\":\"22\"},{\"NAME\":\"3\",\"aa\":\"23\"},{\"NAME\":\"4\",\"aa\":\"24\"},{\"NAME\":\"5\",\"aa\":\"25\"}];\r\n * multi(features)\r\n * //结果:[{\"name\":\"NAME\",\"type\":\"C\",\"size\":254},{\"name\":\"aa\",\"type\":\"C\",\"size\":254}]\r\n */\r\nexport function multi(features) {\r\n    var fields = {};\r\n\r\n    //合并属性对象对象\r\n    features.forEach(collect);\r\n    function collect(f) { inherit(fields, f); }\r\n\r\n    return obj(fields);\r\n}\r\n\r\n/**\r\n * 合并对象a,b,类似jquery的extend\r\n * @param {Object} a\r\n * @param {Object} b\r\n * @returns {Object} 合并后的对象\r\n * \r\n * @example \r\n * var a={\"T\":\"\"};\r\n * var b={\"NAME\":\"测试点\",\"aa\":\"20\"};\r\n * inherit(a,b)\r\n * //结果:{\"T\":\"\",\"NAME\":\"测试点\",\"aa\":\"20\"}\r\n */\r\nexport function inherit(a, b) {\r\n    for (var i in b) {\r\n        var isDef = typeof b[i] !== 'undefined' && b[i] !== null;\r\n        if (typeof a[i] === 'undefined' || isDef) {\r\n            a[i] = b[i];\r\n        }\r\n    }\r\n    return a;\r\n}\r\n\r\n/**\r\n * 属性对象转为字段定义\r\n * @param {Object} _ 属性对象\r\n * @return {Array.<module:GeoJson2Shp/Dbf/Field~Field>} 字段定义\r\n */\r\nexport function obj(_) {\r\n    var fields = {}, o = [];\r\n    for (var p in _) fields[p] = _[p] === null ? 'null' : typeof _[p];\r\n    for (var n in fields) {\r\n        var t = FieldType[fields[n]];\r\n        if (t) {\r\n            o.push({\r\n                name: n,   //字段名称\r\n                type: t,   //字段类型\r\n                size: FieldSize[t]  //字段大小\r\n            });\r\n        }\r\n    }\r\n    return o;\r\n}\r\n\r\n\r\n\r\nexport default undefined;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/Write\r\n */\r\n\r\nimport * as Lib from '../Lib.js'\r\nimport * as Field from './Field.js'\r\n\r\n/**\r\n * 根据属性对象与字段定义生成dbf文件流,字段定义可不传,通过属性对象进行生成\r\n * dbf文件结构\r\n *\r\n *           _______________________  _______\r\n * 00h /   0| 版本号(dBase III)     |  ^\r\n *          |-----------------------|  |\r\n * 01h /   1|  最后更新时间(年)     |  |\r\n * 02h /   2|  最后更新时间(月)     |  |\r\n * 03h /   3|  最后更新时间(日)     |  |\r\n *          |-----------------------|  |\r\n * 04h /   4| 记录数量              | Record\r\n * 05h /   5|                       | header\r\n * 06h /   6|                       |  |\r\n * 07h /   7|                       |  |\r\n *          |-----------------------|  |\r\n * 08h /   8| 文件头信息长度        |  |\r\n * 09h /   9|                       |  |\r\n *          |-----------------------|  |\r\n * 0Ah /  10| 每条记录的长度        |  |\r\n * 0Bh /  11|                       |  |\r\n *          |-----------------------|  |\r\n * 0Ch /  12| ( Reserved )        *3|  |\r\n * 0Dh /  13|                       |  |\r\n *          |-----------------------|  |\r\n * 0Eh /  14| Incomplete transac.*12|  |\r\n *          |-----------------------|  |\r\n * 0Fh /  15| Encryption flag    *13|  |\r\n *          |-----------------------|  |\r\n * 10h /  16| Free record thread    |  |\r\n * 11h /  17| (reserved for LAN     |  |\r\n * 12h /  18|  only )               |  |\r\n * 13h /  19|                       |  |\r\n *          |-----------------------|  |\r\n * 14h /  20| ( Reserved for        |  |            _        |=======================| ______\r\n *          |   multi-user dBASE )  |  |           / 00h /  0| Field name in ASCII   |  ^\r\n *          : ( dBASE III+ - )      :  |          /          : (terminated by 00h)   :  |\r\n *          :                       :  |         |           |                       |  |\r\n * 1Bh /  27|                       |  |         |   0Ah / 10|                       |  |\r\n *          |-----------------------|  |         |           |-----------------------| For\r\n * 1Ch /  28| MDX flag (dBASE IV)*14|  |         |   0Bh / 11| Field type (ASCII) *20| each\r\n *          |-----------------------|  |         |           |-----------------------| field\r\n * 1Dh /  29| Language driver     *5|  |        /    0Ch / 12| Field data address    |  |\r\n *          |-----------------------|  |       /             |                     *6|  |\r\n * 1Eh /  30| ( Reserved )          |  |      /              | (in memory !!!)       |  |\r\n * 1Fh /  31|                     *3|  |     /       0Fh / 15| (dBASE III+)          |  |\r\n *          |=======================|__|____/                |-----------------------|  |  -\r\n * 20h /  32|                       |  |  ^          10h / 16| Field length       *22|  |   |\r\n *          |- - - - - - - - - - - -|  |  |                  |-----------------------|  |   | *7\r\n *          |                    *19|  |  |          11h / 17| Decimal count      *23|  |   |\r\n *          |- - - - - - - - - - - -|  |  Field              |-----------------------|  |  -\r\n *          |                       |  | Descriptor  12h / 18| ( Reserved for        |  |\r\n *          :. . . . . . . . . . . .:  |  |array     13h / 19|   multi-user dBASE)*18|  |\r\n *          :                       :  |  |                  |-----------------------|  |\r\n *       n  |                       |__|__v_         14h / 20| Work area ID       *16|  |\r\n *          |-----------------------|  |    \\                |-----------------------|  |\r\n *       n+1| Terminator (0Dh)      |  |     \\       15h / 21| ( Reserved for        |  |\r\n *          |=======================|  |      \\      16h / 22|   multi-user dBASE )  |  |\r\n *       m  | Database Container    |  |       \\             |-----------------------|  |\r\n *          :                    *15:  |        \\    17h / 23| Flag for SET FIELDS   |  |\r\n *          :                       :  |         |           |-----------------------|  |\r\n *     / m+263                      |  |         |   18h / 24| ( Reserved )          |  |\r\n *          |=======================|__v_ ___    |           :                       :  |\r\n *          :                       :    ^       |           :                       :  |\r\n *          :                       :    |       |           :                       :  |\r\n *          :                       :    |       |   1Eh / 30|                       |  |\r\n *          | Record structure      |    |       |           |-----------------------|  |\r\n *          |                       |    |        \\  1Fh / 31| Index field flag    *8|  |\r\n *          |                       |    |         \\_        |=======================| _v_____\r\n *          |                       | Records\r\n *          |-----------------------|    |\r\n *          |                       |    |          _        |=======================| _______\r\n *          |                       |    |         / 00h /  0| Record deleted flag *9|  ^\r\n *          |                       |    |        /          |-----------------------|  |\r\n *          |                       |    |       /           | Data               *10|  One\r\n *          |                       |    |      /            : (ASCII)            *17: record\r\n *          |                       |____|_____/             |                       |  |\r\n *          :                       :    |                   |                       | _v_____\r\n *          :                       :____|_____              |=======================|\r\n *          :                       :    |\r\n *          |                       |    |\r\n *          |                       |    |\r\n *          |                       |    |\r\n *          |                       |    |\r\n *          |                       |    |\r\n *          |=======================|    |\r\n *          |__文件结束标识__________| ___v____  文件结束标识 ( 1Ah )  *11\r\n * \r\n */\r\nclass Writer {\r\n    /**\r\n     * \r\n     * @param {Array.<Object>} data 属性对象\r\n     * @param {Array.<module:GeoJson2Shp/Dbf/Field~Field>} field_meta  字段定义\r\n     */\r\n    constructor(data, field_meta) {\r\n\r\n        /**\r\n         * 字段定义\r\n         * @type  {Array.<module:GeoJson2Shp/Dbf/Field~Field>}\r\n         */\r\n        this.field_meta_ = field_meta || Field.multi(data);\r\n\r\n        /**\r\n         * 字段定义\r\n         * @type {Array.<Object>}\r\n         */\r\n        this.data_ = data;\r\n    }\r\n\r\n    /**\r\n     * 写入dbf文件\r\n     * @param {function} callback 回调函数\r\n     */\r\n    write(callback) {\r\n\r\n        /**\r\n         * 字段描述长度\r\n         * @type {number}\r\n         */\r\n        var fieldDescLength = (32 * this.field_meta_.length);\r\n\r\n        /**\r\n         * 每条记录所占长度(包括删除标记)\r\n         * @type {number}\r\n         */\r\n        var bytesPerRecord = this.getBytesPerRecord(this.field_meta_);\r\n\r\n        /**\r\n         * dbf文件流\r\n         * @type {ArrayBuffer}\r\n         */\r\n        var buffer = new ArrayBuffer(\r\n            // 文件头信息长度\r\n            32 +\r\n            // 字段描述长度\r\n            fieldDescLength +\r\n            //描述信息结束\r\n            1 +\r\n            // 属性数据长度\r\n            (bytesPerRecord * this.data_.length) +\r\n            // 文件结束标识\r\n            1\r\n        );\r\n\r\n        /**\r\n         * 当前时间\r\n         * @type {Date}\r\n         */\r\n        var now = new Date();\r\n\r\n        /**\r\n         * dbf文件视图\r\n         * @type {DataView}\r\n         */\r\n        var view = new DataView(buffer);\r\n\r\n        // 版本号 - dBase III(1)\r\n        view.setUint8(0, 0x03);\r\n        // 最后一次更新日期\r\n        //当前年-1900(1)\r\n        view.setUint8(1, now.getFullYear() - 1900);\r\n        //当前月(1)\r\n        view.setUint8(2, now.getMonth());\r\n        //当前日(1)\r\n        view.setUint8(3, now.getDate());\r\n        // 记录数(4)\r\n        view.setUint32(4, this.data_.length, true);\r\n\r\n        // 文件头信息长度(2)\r\n        var headerLength = fieldDescLength + 32 + 1;\r\n        view.setUint16(8, headerLength, true);\r\n        // 每条记录的长度(2)\r\n        view.setUint16(10, bytesPerRecord, true);\r\n\r\n        // 描述信息结束(1)\r\n        view.setInt8(32 + fieldDescLength, 0x0D);\r\n\r\n        //字段描述(字段数量*32)\r\n        this.field_meta_.forEach(function (f, i) {\r\n            //字段名称占10位\r\n            let name = f.name.slice(0, 10);\r\n            name = Lib.rpad(name, 10, \" \");\r\n            let uint8Array = Lib.stringToUint8Array(name);\r\n\r\n            for (let index = 0; index < 10; index++) {\r\n                view.setInt8(32 + i * 32 + index, uint8Array[index]);\r\n            }\r\n\r\n            // 字段类型(5)\r\n            view.setInt8(32 + i * 32 + 11, f.type.charCodeAt(0));\r\n            // 字段长度(1)\r\n            view.setInt8(32 + i * 32 + 16, f.size);\r\n            if (f.type == 'N') view.setInt8(32 + i * 32 + 17, 3);\r\n        });\r\n\r\n        var offset = fieldDescLength + 32 + 1;\r\n\r\n        //记录\r\n        this.data_.forEach(function (row, num) {\r\n            // 删除标记\r\n            view.setUint8(offset, 32);\r\n            offset++;\r\n            this.field_meta_.forEach(function (f) {\r\n                var val = row[f.name];\r\n                if (val === null || typeof val === 'undefined') val = '';\r\n\r\n                switch (f.type) {\r\n                    // boolean\r\n                    case 'L':\r\n                        view.setUint8(offset, val ? 84 : 70);\r\n                        offset++;\r\n                        break;\r\n\r\n                    // date\r\n                    case 'D':\r\n                        offset = this.writeField_(view, 8,\r\n                            Lib.lpad(val.toString(), 8, ' '), offset);\r\n                        break;\r\n\r\n                    // number\r\n                    case 'N':\r\n                        offset = this.writeField_(view, f.size,\r\n                            Lib.lpad(val.toString(), f.size, ' ').substr(0, 18),\r\n                            offset);\r\n                        break;\r\n\r\n                    // string\r\n                    case 'C':\r\n                        offset = this.writeField_(view, f.size,\r\n                            Lib.rpad(val.toString(), f.size, ' '), offset);\r\n                        break;\r\n\r\n                    default:\r\n                        throw new Error('Unknown field type');\r\n                }\r\n            }.bind(this));\r\n        }.bind(this));\r\n\r\n        // 文件结束表示\r\n        view.setUint8(offset, 0x1A);\r\n\r\n        callback(null, {\r\n            dbf: view\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 写入字段\r\n     * @param {DataView} view dbf文件对象\r\n     * @param {number} fieldLength 字段长度\r\n     * @param {string} str 值\r\n     * @param {number} offset 写入位置\r\n     * @returns {number} 写入后流的位置\r\n     */\r\n    writeField_(view, fieldLength, str, offset) {\r\n        let uint8Array = Lib.stringToUint8Array(str);\r\n        for (var i = 0; i < fieldLength; i++) {\r\n            view.setUint8(offset, uint8Array[i]);\r\n            offset++;\r\n        }\r\n        return offset;\r\n    };\r\n\r\n    /**\r\n     * 获取每条记录所占字节数(包括删除标记)\r\n     * @param {Array.<module:GeoJson2Shp/Dbf/Field~Field>} fields 字段定义\r\n     * @returns {number} 每条记录所占长度\r\n     */\r\n    getBytesPerRecord(fields) {\r\n        // deleted flag\r\n        return fields.reduce(function (memo, f) { return memo + f.size; }, 1);\r\n    }\r\n}\r\n\r\nexport default Writer;\r\n","﻿import GeoJson2Shp from 'GeoJson2Shp/GeoJson2Shp.js'\r\n\r\nwindow.onload = function () {\r\n\r\n\r\n    var gj = '{\"type\":\"FeatureCollection\", \"features\": [{ \"type\": \"Feature\", \"geometry\": { \"type\": \"MultiPoint\", \"coordinates\": [[120, 28], [120, 29]] }, \"properties\": { \"NAME\": \"测试多点\" } }]}';\r\n    //var gj = '{\"type\":\"FeatureCollection\", \"features\": [{ \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [120, 29] }, \"properties\": { \"NAME\": \"测试多点\" } }]}';\r\n\r\n    var cpg = 'UTF-8';\r\n    var projection = 'GEOGCS[\\\"GCS_China_Geodetic_Coordinate_System_2000\\\",DATUM[\\\"D_China_2000\\\",SPHEROID[\\\"CGCS2000\\\",6378137.0,298.257222101]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]]';\r\n\r\n    $(\"#btnDownLoad\").bind(\"click\", function () {\r\n        var zip = new JSZip(),\r\n            layers = zip.folder('layers');\r\n        console.log(GeoJson2Shp);\r\n        var g2s = new GeoJson2Shp(gj);\r\n        g2s.writePoint(function (err, files) {\r\n            var fileName = \"point\";\r\n            layers.file(fileName + '.shp', files.shp.buffer, { binary: true });\r\n            layers.file(fileName + '.shx', files.shx.buffer, { binary: true });\r\n            layers.file(fileName + '.dbf', files.dbf.buffer, { binary: true });\r\n            layers.file(fileName + '.prj', projection);\r\n            layers.file(fileName + '.cpg', cpg);\r\n        }.bind(this));\r\n\r\n        g2s.writeMultiPoint(function (err, files) {\r\n            var fileName = \"multipoint\";\r\n            layers.file(fileName + '.shp', files.shp.buffer, { binary: true });\r\n            layers.file(fileName + '.shx', files.shx.buffer, { binary: true });\r\n            layers.file(fileName + '.dbf', files.dbf.buffer, { binary: true });\r\n            layers.file(fileName + '.prj', projection);\r\n            layers.file(fileName + '.cpg', cpg);\r\n        }.bind(this));\r\n\r\n        g2s.writePolyline(function (err, files) {\r\n            var fileName = \"polyline\";\r\n            layers.file(fileName + '.shp', files.shp.buffer, { binary: true });\r\n            layers.file(fileName + '.shx', files.shx.buffer, { binary: true });\r\n            layers.file(fileName + '.dbf', files.dbf.buffer, { binary: true });\r\n            layers.file(fileName + '.prj', projection);\r\n            layers.file(fileName + '.cpg', cpg);\r\n        }.bind(this));\r\n\r\n        g2s.writePolygon(function (err, files) {\r\n            var fileName = \"polygon\";\r\n            layers.file(fileName + '.shp', files.shp.buffer, { binary: true });\r\n            layers.file(fileName + '.shx', files.shx.buffer, { binary: true });\r\n            layers.file(fileName + '.dbf', files.dbf.buffer, { binary: true });\r\n            layers.file(fileName + '.prj', projection);\r\n            layers.file(fileName + '.cpg', cpg);\r\n        }.bind(this));\r\n\r\n        var zipName = \"example\";\r\n        zip.generateAsync({ type: \"blob\" })\r\n            .then(function (content) {\r\n                // see FileSaver.js\r\n                saveAs(content, zipName + \".zip\");\r\n            });\r\n    });\r\n}\r\n"],"sourceRoot":""}