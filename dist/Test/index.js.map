{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/GeoJson2Shp/Shp/GeometryType.js","webpack:///./src/GeoJson2Shp/Dbf/FieldSize.js","webpack:///./src/GeoJson2Shp/Dbf/FieldType.js","webpack:///./src/GeoJson2Shp/Dbf/Field.js","webpack:///./src/GeoJson2Shp/GeoJson2Shp.js","webpack:///./src/GeoJson2Shp/Shp/Extent.js","webpack:///./src/GeoJson2Shp/Shp/PointsWriter.js","webpack:///./src/GeoJson2Shp/Shp/PolyWriter.js","webpack:///./src/GeoJson2Shp/Shp/Write.js","webpack:///./src/GeoJson2Shp/Lib.js","webpack:///./src/GeoJson2Shp/Dbf/Write.js","webpack:///./src/Test/DownLoad.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","NULL","POINT","POLYLINE","POLYGON","MULTIPOINT","POINTZ","POLYLINEZ","POLYGONZ","MULTIPOINTZ","POINTM","POLYLINEM","POLYGONM","MULTIPOINTM","MULTIPATCH","Dbf_FieldSize","C","L","D","N","M","F","B","Dbf_FieldType","string","number","boolean","null","multi","features","fields","forEach","f","a","b","isDef","inherit","_","push","type","size","obj","bytesPer","reduce","memo","_Shp_Write__WEBPACK_IMPORTED_MODULE_0__","_Dbf_Write__WEBPACK_IMPORTED_MODULE_1__","_Shp_GeometryType_js__WEBPACK_IMPORTED_MODULE_2__","GeoJson2Shp","[object Object]","geojson","eval","this","geojson_","callback","write_","writeOptions","getWriteOptions_","geometries","err","files","dbf","properties","oftype","filter","geometry","length","map","justCoords_","justProps_","getPointOptions","getPolylineOptions_","getPolygonOptions_","coordinates","enlarge","extent","pt","xmin","xmax","ymin","ymax","blank","Number","MAX_VALUE","write","shpView","shxView","fileLength","shpI","shxI","coords","setInt32","setFloat64","PointsWriter_extent","parts","TYPE","shxLength","shpLength","PolyWriter_write","shxOffset","flattened","justCoords","noParts","PolyWriter_parts","contentLength","featureExtent","onlyParts","arr","Array","isArray","concat","idx","PolyWriter_shpLength","PolyWriter_shxLength","PolyWriter_extent","no","GeometryType","rings","undefined","writers","1","PointsWriter_namespaceObject","5","PolyWriter_namespaceObject","3","writeHeader","view","writeExtent","geometry_type","writer","shpBuffer","ArrayBuffer","DataView","shxBuffer","shp","shx","lpad","str","len","char","rpad","stringToUint8Array","options","stream","Error","pos","at","tlen","Math","max","target","Uint8Array","charCodeAt","extra","update","set","slice","data","meta","field_meta","Field","fieldDescLength","bytesPerRecord","buffer","now","Date","setUint8","getFullYear","getMonth","getDate","setUint32","headerLength","setUint16","setInt8","uint8Array","index","offset","row","num","val","Write_writeField","toString","substr","fieldLength","GeoJson2Shp_GeoJson2Shp_js__WEBPACK_IMPORTED_MODULE_0__","window","onload","$","zip","JSZip","layers","folder","console","log","g2s","writePoint","file","fileName","binary","writePolyline","writePolygon","generateAsync","then","content","saveAs","zipName"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","﻿/**\r\n * @module GeoJson2Shp/Shp/GeometryType \r\n */\r\n\r\n/**\r\n * 图形类型在shp文件中的值\r\n * @enum {number}\r\n */\r\nvar geometryType = {\r\n    NULL: 0,\r\n    POINT: 1,\r\n    POLYLINE: 3,\r\n    POLYGON: 5,\r\n    MULTIPOINT: 8,\r\n    POINTZ: 11,\r\n    POLYLINEZ: 13,\r\n    POLYGONZ: 15,\r\n    MULTIPOINTZ: 18,\r\n    POINTM: 21,\r\n    POLYLINEM: 23,\r\n    POLYGONM: 25,\r\n    MULTIPOINTM: 28,\r\n    MULTIPATCH: 31,\r\n};\r\n\r\nexport default geometryType;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/FieldSize\r\n */\r\n\r\n/**\r\n * dbf中各种数据格式的大小 \r\n * @enum {number}\r\n */\r\nconst FieldSize = {\r\n    /**\r\n     * 字符串\r\n     */\r\n    C: 254,\r\n    /**\r\n     * 布尔\r\n     */\r\n    L: 1,\r\n    /**\r\n     * 日期时间\r\n     */\r\n    D: 8,\r\n    /**\r\n     * 数值\r\n     */\r\n    N: 18,\r\n    /**\r\n     * 数值\r\n     */\r\n    M: 18,\r\n    /**\r\n     * 数值,浮点数\r\n     */\r\n    F: 18,\r\n    /**\r\n     * 数值\r\n     */\r\n    B: 8\r\n};\r\n\r\nexport default FieldSize;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/FieldType\r\n */\r\n\r\n/**\r\n * 字段类型\r\n * @enum {string}\r\n */\r\nvar FieldType = {\r\n    /**\r\n     * 字符串\r\n     */\r\n    string: 'C',\r\n\r\n    /**\r\n     * 数值\r\n     */\r\n    number: 'N',\r\n\r\n    /**\r\n     * 布尔\r\n     */\r\n    boolean: 'L',\r\n\r\n    /**\r\n     * 字段的所有值都为null时要使用的类型\r\n     */\r\n    null: 'C'\r\n};\r\n\r\nexport default FieldType;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/Field\r\n */\r\n\r\nimport FieldSize from './FieldSize.js'\r\nimport FieldType from './FieldType.js'\r\n\r\n/**\r\n * @typedef {Object} Field\r\n * @property {string} Field.name 字段名称\r\n * @property {module:GeoJson2Shp/Dbf/FieldType} Field.type 字段类型\r\n * @property {number} Field.size 字段大小\r\n * \r\n */\r\n\r\n/**\r\n * 属性数组所有字段定义\r\n * @param {Array.<Object>} features 属性数组\r\n * @return {Array.<module:GeoJson2Shp/Dbf/Field~Field>} 属性数组所有字段定义\r\n * \r\n * @example \r\n * var features=[{\"NAME\":\"测试点\",\"aa\":\"20\"},{\"NAME\":\"1\",\"aa\":\"21\"},{\"NAME\":\"2\",\"aa\":\"22\"},{\"NAME\":\"3\",\"aa\":\"23\"},{\"NAME\":\"4\",\"aa\":\"24\"},{\"NAME\":\"5\",\"aa\":\"25\"}];\r\n * multi(features)\r\n * //结果:[{\"name\":\"NAME\",\"type\":\"C\",\"size\":254},{\"name\":\"aa\",\"type\":\"C\",\"size\":254}]\r\n */\r\nexport function multi(features) {\r\n    var fields = {};\r\n\r\n    //合并属性对象对象\r\n    features.forEach(collect);\r\n    function collect(f) { inherit(fields, f); }\r\n\r\n    return obj(fields);\r\n}\r\n\r\n/**\r\n * 合并对象a,b,类似jquery的extend\r\n * @param {Object} a\r\n * @param {Object} b\r\n * @returns {Object} 合并后的对象\r\n * \r\n * @example \r\n * var a={\"T\":\"\"};\r\n * var b={\"NAME\":\"测试点\",\"aa\":\"20\"};\r\n * inherit(a,b)\r\n * //结果:{\"T\":\"\",\"NAME\":\"测试点\",\"aa\":\"20\"}\r\n */\r\nexport function inherit(a, b) {\r\n    for (var i in b) {\r\n        var isDef = typeof b[i] !== 'undefined' && b[i] !== null;\r\n        if (typeof a[i] === 'undefined' || isDef) {\r\n            a[i] = b[i];\r\n        }\r\n    }\r\n    return a;\r\n}\r\n\r\n/**\r\n * 属性对象转为字段定义\r\n * @param {Object} _ 属性对象\r\n * @return {Array.<module:GeoJson2Shp/Dbf/Field~Field>} 字段定义\r\n */\r\nexport function obj(_) {\r\n    var fields = {}, o = [];\r\n    for (var p in _) fields[p] = _[p] === null ? 'null' : typeof _[p];\r\n    for (var n in fields) {\r\n        var t = FieldType[fields[n]];\r\n        if (t) {\r\n            o.push({\r\n                name: n,   //字段名称\r\n                type: t,   //字段类型\r\n                size: FieldSize[t]  //字段大小\r\n            });\r\n        }\r\n    }\r\n    return o;\r\n}\r\n\r\n/**\r\n * 获取每条记录所占长度\r\n * @param {Array.<module:GeoJson2Shp/Dbf/Field~Field>} fields 字段定义\r\n * @returns {number} 每条记录所占长度\r\n */\r\nexport function bytesPer(fields) {\r\n    // deleted flag\r\n    return fields.reduce(function (memo, f) { return memo + f.size; }, 1);\r\n}\r\n\r\nexport default undefined;\r\n","﻿/**\r\n * @module GeoJson2Shp/GeoJson2Shp\r\n */\r\n\r\nimport ShpWrite from './Shp/Write'\r\nimport DbfWrite from './Dbf/Write'\r\nimport GeometryType from './Shp/GeometryType.js'\r\nimport Field from './Dbf/Field.js'\r\n\r\n/**\r\n * GeoJson转为Shp \r\n * @api\r\n */\r\nclass GeoJson2Shp {\r\n    /**\r\n     * 构造函数\r\n     * @param {Object|string} geojson 矢量数据geojson格式\r\n     */\r\n    constructor(geojson) {\r\n        if (typeof (geojson) == \"string\") {\r\n            geojson = eval(\"(\" + geojson + \")\");\r\n        }\r\n\r\n        /**\r\n         * @type {Object} \r\n         * @readonly\r\n         */\r\n        this.geojson_ = geojson;\r\n    }\r\n\r\n    /**\r\n     * 写入点\r\n     * @param {Function} callback\r\n     */\r\n    writePoint(callback) {\r\n        this.write_(GeometryType.POINT, callback);\r\n    }\r\n\r\n    /**\r\n     * 写入线\r\n     * @param {Function} callback\r\n     */\r\n    writePolyline(callback) {\r\n        this.write_(GeometryType.POLYLINE, callback);\r\n    }\r\n\r\n    /**\r\n     * 写入面\r\n     * @param {Function} callback\r\n     */\r\n    writePolygon(callback) {\r\n        this.write_(GeometryType.POLYGON, callback);\r\n    }\r\n\r\n    /**\r\n     * 根据类型写入\r\n     * @param {module:GeoJson2Shp/Shp/GeometryType} type\r\n     * @param {Function} callback\r\n     */\r\n    write_(type, callback) {\r\n        var writeOptions = this.getWriteOptions_(type);\r\n        if (writeOptions) {\r\n            ShpWrite(writeOptions.type, writeOptions.geometries, function (err, files) {\r\n                files.dbf = DbfWrite(writeOptions.properties);\r\n                callback(err, files);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取点部分写入参数\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getPointOptions() {\r\n        var oftype = this.geojson_.features.filter(function (f) { return f.geometry.type === \"Point\" || f.geometry.type === \"MultiPoint\"; });\r\n        if (!oftype || oftype.length == 0) {\r\n            return null;\r\n        }\r\n        return {\r\n            geometries: oftype.map(this.justCoords_),\r\n            properties: oftype.map(this.justProps_),\r\n            type: GeometryType.POINT\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取线部分写入参数\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getPolylineOptions_() {\r\n        var oftype = this.geojson_.features.filter(function (f) { return f.geometry.type === \"LineString\" || f.geometry.type === \"MultiLineString\"; });\r\n        if (!oftype || oftype.length == 0) {\r\n            return null;\r\n        }\r\n        return {\r\n            geometries: oftype.map(this.justCoords_),\r\n            properties: oftype.map(this.justProps_),\r\n            type: GeometryType.POLYLINE\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 获取面部分写入参数\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getPolygonOptions_() {\r\n        var oftype = this.geojson_.features.filter(function (f) { return f.geometry.type === \"Polygon\" || f.geometry.type === \"MultiPolygon\"; });\r\n        if (!oftype || oftype.length == 0) {\r\n            return null;\r\n        }\r\n        return {\r\n            geometries: oftype.map(this.justCoords_),\r\n            properties: oftype.map(this.justProps_),\r\n            type: GeometryType.POLYGON\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据传入类型获取写入参数\r\n     * @param {module:GeoJson2Shp/Shp/GeometryType} geometryType  图形类型\r\n     * @return {module:GeoJson2Shp/GeoJson2Shp~WriteOptions} 写入参数\r\n     */\r\n    getWriteOptions_(type) {\r\n        var writeOptions;\r\n        if (type == GeometryType.POINT) {\r\n            writeOptions = this.getPointOptions();\r\n        } else if (type == GeometryType.POLYLINE) {\r\n            writeOptions = this.getPolylineOptions_();\r\n        } else if (type == GeometryType.POLYGON) {\r\n            writeOptions = this.getPolygonOptions_();\r\n        }\r\n        return writeOptions;\r\n    }\r\n\r\n    /**\r\n     * 获取GeoJson中的坐标部分\r\n     * @param {Object} t GeoJson中的feature\r\n     * @return {Array} feature中的坐标部分\r\n     */\r\n    justCoords_(t) {\r\n        if (t.geometry.type == \"LineString\" || t.geometry.type == \"MultiLineString\") {\r\n            return [t.geometry.coordinates];\r\n        } else {\r\n            return t.geometry.coordinates\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取GeoJson中的属性部分\r\n     * @param {Object} t GeoJson中的feature\r\n     * @return {Object} feature中的属性部分\r\n     */\r\n    justProps_(t) {\r\n        return t.properties;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @typedef {Object} WriteOptions\r\n * @property {Array} geometries\r\n * @property {Array} properties\r\n * @property {Array} type\r\n */\r\n\r\nexport default GeoJson2Shp;\r\n","﻿/**\r\n * GeoJson2Shp/Shp/Extent\r\n */\r\n\r\n\r\n\r\n/**\r\n * 合并2个范围\r\n * @param {} extent \r\n * @param {any} pt\r\n */\r\nexport function enlarge(extent, pt) {\r\n    if (pt[0] < extent.xmin) extent.xmin = pt[0];\r\n    if (pt[0] > extent.xmax) extent.xmax = pt[0];\r\n    if (pt[1] < extent.ymin) extent.ymin = pt[1];\r\n    if (pt[1] > extent.ymax) extent.ymax = pt[1];\r\n    return extent;\r\n};\r\n\r\n\r\n/**\r\n * 合并2个范围\r\n * @param {} extent\r\n * @param {any} pt\r\n */\r\nexport function enlargeExtent(extent, ext) {\r\n    if (ext.xmax > extent.xmax) extent.xmax = ext.xmax;\r\n    if (ext.xmin < extent.xmin) extent.xmin = ext.xmin;\r\n    if (ext.ymax > extent.ymax) extent.ymax = ext.ymax;\r\n    if (ext.ymin < extent.ymin) extent.ymin = ext.ymin;\r\n    return extent;\r\n};\r\n\r\n\r\n/**\r\n * 默认范围\r\n */\r\nexport function blank() {\r\n    return {\r\n        xmin: Number.MAX_VALUE,\r\n        ymin: Number.MAX_VALUE,\r\n        xmax: -Number.MAX_VALUE,\r\n        ymax: -Number.MAX_VALUE\r\n    };\r\n};\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/PointsWriter\r\n */\r\n\r\nimport * as ext from './Extent.js'\r\n\r\n/**\r\n * 写入点\r\n * @param {any} coordinates\r\n * @param {any} extent\r\n * @param {any} shpView\r\n * @param {any} shxView\r\n */\r\nexport function write(coordinates, extent, shpView, shxView) {\r\n\r\n    var contentLength = 28, // 8 header, 20 content\r\n        fileLength = 100,\r\n        shpI = 0,\r\n        shxI = 0;\r\n\r\n    coordinates.forEach(function writePoint(coords, i) {\r\n        // HEADER\r\n        // 4 record number\r\n        // 4 content length in 16-bit words (20/2)\r\n        shpView.setInt32(shpI, i);\r\n        shpView.setInt32(shpI + 4, 10);\r\n\r\n        // record\r\n        // (8 + 8) + 4 = 20 content length\r\n        shpView.setInt32(shpI + 8, 1, true); // POINT=1\r\n        shpView.setFloat64(shpI + 12, coords[0], true); // X\r\n        shpView.setFloat64(shpI + 20, coords[1], true); // Y\r\n\r\n        // index\r\n        shxView.setInt32(shxI, fileLength / 2); // length in 16-bit words\r\n        shxView.setInt32(shxI + 4, 10);\r\n\r\n        shxI += 8;\r\n        shpI += contentLength;\r\n        fileLength += contentLength;\r\n    });\r\n};\r\n\r\n/**\r\n * 获取所有图形范围\r\n * @param {Array} coordinates 坐标点数组\r\n */\r\nexport function extent(coordinates) {\r\n    return coordinates.reduce(function (extent, coords) {\r\n        return ext.enlarge(extent, coords);\r\n    }, ext.blank());\r\n};\r\n\r\n/**\r\n * 获取图形中part的数量\r\n * @param {any} geometries\r\n * @param {any} TYPE\r\n */\r\nexport function parts(geometries, TYPE) {\r\n    return geometries.length;\r\n};\r\n\r\n/**\r\n * 获取坐标在shx文件所占长度\r\n * @param {Array} coordinates\r\n * @return 坐标在shx文件所占长度\r\n */\r\nexport function shxLength(coordinates) {\r\n    return coordinates.length * 8;\r\n};\r\n\r\n/**\r\n * 获取坐标在shp文件所占长度\r\n * @param {Array} coordinates\r\n * @return 坐标在shp文件所占长度\r\n */\r\nexport function shpLength(coordinates) {\r\n    return coordinates.length * 28;\r\n};\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/PolyWriter\r\n */\r\nimport * as ext from './Extent.js'\r\nimport GeometryType from './GeometryType.js'\r\n\r\nexport function write(geometries, extent, shpView, shxView, TYPE) {\r\n\r\n    var shpI = 0,\r\n        shxI = 0,\r\n        shxOffset = 100;\r\n\r\n    geometries.forEach(writePolyLine);\r\n\r\n    function writePolyLine(coordinates, i) {\r\n\r\n        var flattened = justCoords(coordinates),\r\n            noParts = parts([coordinates], TYPE),\r\n            contentLength = (flattened.length * 16) + 48 + (noParts - 1) * 4;\r\n\r\n        var featureExtent = flattened.reduce(function (extent, c) {\r\n            return ext.enlarge(extent, c);\r\n        }, ext.blank());\r\n\r\n        // INDEX\r\n        shxView.setInt32(shxI, shxOffset / 2); // offset\r\n        shxView.setInt32(shxI + 4, contentLength / 2); // offset length\r\n\r\n        shxI += 8;\r\n        shxOffset += contentLength + 8;\r\n\r\n        shpView.setInt32(shpI, i + 1); // record number\r\n        shpView.setInt32(shpI + 4, contentLength / 2); // length\r\n        shpView.setInt32(shpI + 8, TYPE, true); // POLYLINE=3\r\n        shpView.setFloat64(shpI + 12, featureExtent.xmin, true); // EXTENT\r\n        shpView.setFloat64(shpI + 20, featureExtent.ymin, true);\r\n        shpView.setFloat64(shpI + 28, featureExtent.xmax, true);\r\n        shpView.setFloat64(shpI + 36, featureExtent.ymax, true);\r\n        shpView.setInt32(shpI + 44, noParts, true);\r\n        shpView.setInt32(shpI + 48, flattened.length, true); // POINTS\r\n        shpView.setInt32(shpI + 52, 0, true); // The first part - index zero\r\n\r\n        var onlyParts = coordinates.reduce(function (arr, coords) {\r\n            if (Array.isArray(coords[0][0])) {\r\n                arr = arr.concat(coords);\r\n            } else {\r\n                arr.push(coords);\r\n            }\r\n            return arr;\r\n        }, []);\r\n        for (var p = 1; p < noParts; p++) {\r\n            shpView.setInt32( // set part index\r\n                shpI + 52 + (p * 4),\r\n                onlyParts.reduce(function (a, b, idx) {\r\n                    return idx < p ? a + b.length : a;\r\n                }, 0),\r\n                true\r\n            );\r\n        }\r\n\r\n        flattened.forEach(function writeLine(coords, i) {\r\n            shpView.setFloat64(shpI + 56 + (i * 16) + (noParts - 1) * 4, coords[0], true); // X\r\n            shpView.setFloat64(shpI + 56 + (i * 16) + (noParts - 1) * 4 + 8, coords[1], true); // Y\r\n        });\r\n\r\n        shpI += contentLength + 8;\r\n    }\r\n};\r\n\r\nexport function shpLength(geometries) {\r\n    return (geometries.length * 56) +\r\n        // points\r\n        (justCoords(geometries).length * 16);\r\n};\r\n\r\nexport function shxLength(geometries) {\r\n    return geometries.length * 8;\r\n};\r\n\r\nexport function extent(coordinates) {\r\n    return justCoords(coordinates).reduce(function (extent, c) {\r\n        return ext.enlarge(extent, c);\r\n    }, ext.blank());\r\n};\r\n\r\nexport function parts(geometries, TYPE) {\r\n    var no = 1;\r\n    if (TYPE === GeometryType.POLYGON || TYPE === GeometryType.POLYLINE) {\r\n        no = geometries.reduce(function (no, coords) {\r\n            no += coords.length;\r\n            if (Array.isArray(coords[0][0][0])) { // multi\r\n                no += coords.reduce(function (no, rings) {\r\n                    return no + rings.length - 1; // minus outer\r\n                }, 0);\r\n            }\r\n            return no;\r\n        }, 0);\r\n    }\r\n    return no;\r\n}\r\n\r\n\r\nfunction totalPoints(geometries) {\r\n    var sum = 0;\r\n    geometries.forEach(function (g) { sum += g.length; });\r\n    return sum;\r\n}\r\n\r\nfunction justCoords(coords, l) {\r\n    if (l === undefined) l = [];\r\n    if (typeof coords[0][0] == 'object') {\r\n        return coords.reduce(function (memo, c) {\r\n            return memo.concat(justCoords(c));\r\n        }, l);\r\n    } else {\r\n        return coords;\r\n    }\r\n}\r\n","﻿/**\r\n * @module GeoJson2Shp/Shp/Write\r\n */\r\n\r\nimport * as PointWriter from './PointsWriter.js'\r\nimport * as PolyWriter from './PolyWriter.js'\r\n\r\n\r\nvar writers = {\r\n    1: PointWriter,\r\n    5: PolyWriter,\r\n    3: PolyWriter\r\n};\r\n\r\n\r\n/**\r\n * 写入图形\r\n * @param {module:GeoJson2Shp/Shp/GeometryType} geometry_type 图形类型\r\n * @param {Array} geometries 图形数组\r\n * @param {function} callback 回调函数\r\n */\r\nfunction write(geometry_type, geometries, callback) {\r\n    var TYPE = geometry_type,\r\n        writer = writers[TYPE],\r\n        parts = writer.parts(geometries, TYPE),\r\n        shpLength = 100 + (parts - geometries.length) * 4 + writer.shpLength(geometries),\r\n        shxLength = 100 + writer.shxLength(geometries),\r\n        shpBuffer = new ArrayBuffer(shpLength),\r\n        shpView = new DataView(shpBuffer),\r\n        shxBuffer = new ArrayBuffer(shxLength),\r\n        shxView = new DataView(shxBuffer),\r\n        extent = writer.extent(geometries);\r\n\r\n    writeHeader(shpView, TYPE);\r\n    writeHeader(shxView, TYPE);\r\n    writeExtent(extent, shpView);\r\n    writeExtent(extent, shxView);\r\n\r\n    writer.write(geometries, extent,\r\n        new DataView(shpBuffer, 100),\r\n        new DataView(shxBuffer, 100),\r\n        TYPE);\r\n\r\n    shpView.setInt32(24, shpLength / 2);\r\n    shxView.setInt32(24, (50 + geometries.length * 4));\r\n    callback(null, {\r\n        shp: shpView,\r\n        shx: shxView\r\n    });\r\n}\r\n\r\n/**\r\n * 写入头\r\n * @param {any} view\r\n * @param {any} TYPE\r\n */\r\nfunction writeHeader(view, TYPE) {\r\n    view.setInt32(0, 9994);\r\n    view.setInt32(28, 1000, true);\r\n    view.setInt32(32, TYPE, true);\r\n}\r\n\r\n/**\r\n * 写入范围\r\n * @param {any} extent\r\n * @param {any} view\r\n */\r\nfunction writeExtent(extent, view) {\r\n    view.setFloat64(36, extent.xmin, true);\r\n    view.setFloat64(44, extent.ymin, true);\r\n    view.setFloat64(52, extent.xmax, true);\r\n    view.setFloat64(60, extent.ymax, true);\r\n}\r\n\r\nexport default write;\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/Lib\r\n */\r\n\r\n/**\r\n * 左补位\r\n * @param {string} str 原字符串\r\n * @param {number} len 目标字符串长度\r\n * @param {string} char 补位字符\r\n * @returns {string} 补位后的字符串\r\n */\r\nexport function lpad(str, len, char) {\r\n    while (str.length < len) { str = char + str; } return str;\r\n};\r\n\r\n/**\r\n * 右补位\r\n * @param {string} str 原字符串\r\n * @param {number} len 目标字符串长度\r\n * @param {string} char 补位字符\r\n * @returns {string} 补位后的字符串\r\n */\r\nexport function rpad(str, len, char) {\r\n    while (str.length < len) { str = str + char; } return str;\r\n};\r\n\r\n/**\r\n * 修改\r\n * 作者:潘知悦\r\n * 描述:中文乱码问题\r\n * @param {object} view\r\n * @param {number} fieldLength\r\n * @param {string} str\r\n * @param {number} offset\r\n * @returns {number}\r\n */\r\nexport function writeField(view, fieldLength, str, offset) {\r\n    let uint8Array = stringToUint8Array(str);\r\n    for (var i = 0; i < fieldLength; i++) {\r\n        view.setUint8(offset, uint8Array[i]);\r\n        offset++;\r\n    }\r\n    return offset;\r\n};\r\n/**\r\n * 字符串转Uint8Array\r\n * @param {string} string\r\n * @param {Object} options \r\n * @param {boolean} [options.stream] 是否为流\r\n */\r\nexport function stringToUint8Array(string, options = { stream: false }) {\r\n    if (options.stream) {\r\n        throw new Error(`Failed to encode: the 'stream' option is unsupported.`);\r\n    }\r\n\r\n    let pos = 0;\r\n    const len = string.length;\r\n    const out = [];\r\n\r\n    let at = 0;  // output position\r\n    let tlen = Math.max(32, len + (len >> 1) + 7);  // 1.5x size\r\n    let target = new Uint8Array((tlen >> 3) << 3);  // ... but at 8 byte offset\r\n\r\n    while (pos < len) {\r\n        let value = string.charCodeAt(pos++);\r\n        if (value >= 0xd800 && value <= 0xdbff) {\r\n            // high surrogate\r\n            if (pos < len) {\r\n                const extra = string.charCodeAt(pos);\r\n                if ((extra & 0xfc00) === 0xdc00) {\r\n                    ++pos;\r\n                    value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\r\n                }\r\n            }\r\n            if (value >= 0xd800 && value <= 0xdbff) {\r\n                continue;  // drop lone surrogate\r\n            }\r\n        }\r\n\r\n        // expand the buffer if we couldn't write 4 bytes\r\n        if (at + 4 > target.length) {\r\n            tlen += 8;  // minimum extra\r\n            tlen *= (1.0 + (pos / string.length) * 2);  // take 2x the remaining\r\n            tlen = (tlen >> 3) << 3;  // 8 byte offset\r\n\r\n            const update = new Uint8Array(tlen);\r\n            update.set(target);\r\n            target = update;\r\n        }\r\n\r\n        if ((value & 0xffffff80) === 0) {  // 1-byte\r\n            target[at++] = value;  // ASCII\r\n            continue;\r\n        } else if ((value & 0xfffff800) === 0) {  // 2-byte\r\n            target[at++] = ((value >> 6) & 0x1f) | 0xc0;\r\n        } else if ((value & 0xffff0000) === 0) {  // 3-byte\r\n            target[at++] = ((value >> 12) & 0x0f) | 0xe0;\r\n            target[at++] = ((value >> 6) & 0x3f) | 0x80;\r\n        } else if ((value & 0xffe00000) === 0) {  // 4-byte\r\n            target[at++] = ((value >> 18) & 0x07) | 0xf0;\r\n            target[at++] = ((value >> 12) & 0x3f) | 0x80;\r\n            target[at++] = ((value >> 6) & 0x3f) | 0x80;\r\n        } else {\r\n            // FIXME: do we care\r\n            continue;\r\n        }\r\n\r\n        target[at++] = (value & 0x3f) | 0x80;\r\n    }\r\n\r\n    return target.slice(0, at);\r\n}\r\n","﻿/**\r\n * @module GeoJson2Shp/Dbf/Write\r\n */\r\n\r\nimport * as Lib from '../Lib.js'\r\nimport * as Field from './Field.js'\r\n\r\n/**\r\n * 根据属性对象与字段定义生成dbf文件流,字段定义可不传,通过属性对象进行生成\r\n * @param {Array.<Object>} data 属性对象\r\n * @param {Array.<module:GeoJson2Shp/Dbf/Field~Field>} meta  字段定义\r\n * @returns {DataView} dbf文件流\r\n */\r\nvar Write = function (data, meta) {\r\n    /**\r\n     * 字段定义\r\n     * @type  {Array.<module:GeoJson2Shp/Dbf/Field~Field>}\r\n     */\r\n    var field_meta = meta || Field.multi(data);\r\n\r\n    /**\r\n     * 字段描述长度\r\n     * @type {number}\r\n     */\r\n    var fieldDescLength = (32 * field_meta.length) + 1;\r\n\r\n    /**\r\n     * 每条记录所占长度\r\n     * @type {number}\r\n     */\r\n    var bytesPerRecord = Field.bytesPer(field_meta); // deleted flag\r\n\r\n    var buffer = new ArrayBuffer(\r\n        // field header\r\n        fieldDescLength +\r\n        // header\r\n        32 +\r\n        // contents\r\n        (bytesPerRecord * data.length) +\r\n        // EOF marker\r\n        1\r\n    ),\r\n        now = new Date(),\r\n        view = new DataView(buffer);\r\n    // version number - dBase III\r\n    view.setUint8(0, 0x03);\r\n    // date of last update\r\n    view.setUint8(1, now.getFullYear() - 1900);\r\n    view.setUint8(2, now.getMonth());\r\n    view.setUint8(3, now.getDate());\r\n    // number of records\r\n    view.setUint32(4, data.length, true);\r\n\r\n    // length of header\r\n    var headerLength = fieldDescLength + 32;\r\n    view.setUint16(8, headerLength, true);\r\n    // length of each record\r\n    view.setUint16(10, bytesPerRecord, true);\r\n\r\n    // Terminator\r\n    view.setInt8(32 + fieldDescLength - 1, 0x0D);\r\n\r\n    field_meta.forEach(function (f, i) {\r\n        // field name\r\n        //f.name.split('').slice(0, 8).forEach(function (c, x) {\r\n        //    view.setInt8(32 + i * 32 + x, c.charCodeAt(0));\r\n        //});\r\n        let name = f.name.slice(0, 10);\r\n        name = Lib.rpad(name, 10, \" \");\r\n        let uint8Array = Lib.stringToUint8Array(name);\r\n        for (let index = 0; index < 10; index++) {\r\n            view.setInt8(32 + i * 32 + index, uint8Array[index]);\r\n        }\r\n        // field type\r\n        view.setInt8(32 + i * 32 + 11, f.type.charCodeAt(0));\r\n        // field length\r\n        view.setInt8(32 + i * 32 + 16, f.size);\r\n        if (f.type == 'N') view.setInt8(32 + i * 32 + 17, 3);\r\n    });\r\n\r\n    var offset = fieldDescLength + 32;\r\n\r\n    data.forEach(function (row, num) {\r\n        // delete flag: this is not deleted\r\n        view.setUint8(offset, 32);\r\n        offset++;\r\n        field_meta.forEach(function (f) {\r\n            var val = row[f.name];\r\n            if (val === null || typeof val === 'undefined') val = '';\r\n\r\n            switch (f.type) {\r\n                // boolean\r\n                case 'L':\r\n                    view.setUint8(offset, val ? 84 : 70);\r\n                    offset++;\r\n                    break;\r\n\r\n                // date\r\n                case 'D':\r\n                    offset = writeField(view, 8,\r\n                        Lib.lpad(val.toString(), 8, ' '), offset);\r\n                    break;\r\n\r\n                // number\r\n                case 'N':\r\n                    offset = writeField(view, f.size,\r\n                        Lib.lpad(val.toString(), f.size, ' ').substr(0, 18),\r\n                        offset);\r\n                    break;\r\n\r\n                // string\r\n                case 'C':\r\n                    offset = writeField(view, f.size,\r\n                        Lib.rpad(val.toString(), f.size, ' '), offset);\r\n                    break;\r\n\r\n                default:\r\n                    throw new Error('Unknown field type');\r\n            }\r\n        });\r\n    });\r\n\r\n    // EOF flag\r\n    view.setUint8(offset, 0x1A);\r\n\r\n    return view;\r\n};\r\n\r\nexport default Write;\r\n\r\n/**\r\n * 写入字段\r\n * @param {DataView} view dbf文件对象\r\n * @param {number} fieldLength 字段长度\r\n * @param {string} str 值\r\n * @param {number} offset 写入位置\r\n * @returns {number} 写入后流的位置\r\n */\r\nfunction writeField(view, fieldLength, str, offset) {\r\n    let uint8Array = Lib.stringToUint8Array(str);\r\n    for (var i = 0; i < fieldLength; i++) {\r\n        view.setUint8(offset, uint8Array[i]);\r\n        offset++;\r\n    }\r\n    return offset;\r\n};\r\n","﻿import GeoJson2Shp from 'GeoJson2Shp/GeoJson2Shp.js'\r\n\r\n\r\nwindow.onload = function () {\r\n\r\n\r\n    var gj = '{\"type\":\"FeatureCollection\", \"features\": [{ \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [120, 28] }, \"properties\": { \"NAME\": \"测试点\", \"aa\": \"20\" } },{ \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [119.98512455516016, 27.99308422301305] }, \"properties\": { \"NAME\": \"1\", \"aa\": \"21\" } },{ \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [119.98460260972718, 28.00665480427046] }, \"properties\": { \"NAME\": \"2\", \"aa\": \"22\" } },{ \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [120.00809015421116, 28.00926453143535] }, \"properties\": { \"NAME\": \"3\", \"aa\": \"23\" } },{ \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [120.0140925266904, 27.99204033214709] }, \"properties\": { \"NAME\": \"4\", \"aa\": \"24\" } },{ \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [119.99921708185055, 27.981862396204033] }, \"properties\": { \"NAME\": \"5\", \"aa\": \"25\" } }]}';\r\n\r\n    $(\"#btnDownLoad\").bind(\"click\", function () {\r\n        var zip = new JSZip(),\r\n            layers = zip.folder('layers');\r\n        console.log(GeoJson2Shp);\r\n        var g2s = new GeoJson2Shp(gj);\r\n        g2s.writePoint(function (err, files) {\r\n            var fileName = \"point\";\r\n            layers.file(fileName + '.shp', files.shp.buffer, { binary: true });\r\n            layers.file(fileName + '.shx', files.shx.buffer, { binary: true });\r\n            layers.file(fileName + '.dbf', files.dbf.buffer, { binary: true });\r\n\r\n        }.bind(this));\r\n\r\n        g2s.writePolyline(function (err, files) {\r\n            var fileName = \"polyline\";\r\n            layers.file(fileName + '.shp', files.shp.buffer, { binary: true });\r\n            layers.file(fileName + '.shx', files.shx.buffer, { binary: true });\r\n            layers.file(fileName + '.dbf', files.dbf.buffer, { binary: true });\r\n\r\n        }.bind(this));\r\n\r\n        g2s.writePolygon(function (err, files) {\r\n            var fileName = \"polygon\";\r\n            layers.file(fileName + '.shp', files.shp.buffer, { binary: true });\r\n            layers.file(fileName + '.shx', files.shx.buffer, { binary: true });\r\n            layers.file(fileName + '.dbf', files.dbf.buffer, { binary: true });\r\n\r\n        }.bind(this));\r\n\r\n        var zipName = \"example\";\r\n        zip.generateAsync({ type: \"blob\" })\r\n            .then(function (content) {\r\n                // see FileSaver.js\r\n                saveAs(content, zipName + \".zip\");\r\n            });\r\n    });\r\n}\r\n"],"sourceRoot":""}